# Copyright Ren√© Ferdinand Rivera Morell 2023
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)

import project ;
import feature ;
import os ;
import predef ;

project /boost/context
    : common-requirements
        <source>/boost/assert//boost_assert
        <source>/boost/config//boost_config
        <source>/boost/core//boost_core
        <source>/boost/mp11//boost_mp11
        <source>/boost/pool//boost_pool
        <source>/boost/predef//boost_predef
        <source>/boost/smart_ptr//boost_smart_ptr
        <include>include
    : requirements
        # Auto-detect toolset default address-model and architecture.
        [ predef.address-model ]
        [ predef.architecture ]
    ;

feature.feature segmented-stacks : on : optional propagated composite ;
feature.compose <segmented-stacks>on : <define>BOOST_USE_SEGMENTED_STACKS ;

feature.feature htm : tsx : optional propagated composite ;
feature.compose <htm>tsx : <define>BOOST_USE_TSX ;

feature.feature valgrind : on : optional propagated composite ;
feature.compose <valgrind>on : <define>BOOST_USE_VALGRIND ;

local rule default_binary_format ( )
{
    local tmp = elf ;
    if [ os.name ] = "NT" { tmp = pe ; }
    else if [ os.name ] = "CYGWIN" { tmp = pe ; }
    else if [ os.name ] = "AIX" { tmp = xcoff ; }
    else if [ os.name ] = "MACOSX" { tmp = mach-o ; }
    return $(tmp) ;
}

feature.feature binary-format
   : elf
     mach-o
     pe
     xcoff
   : propagated
   ;
feature.set-default binary-format : [ default_binary_format ] ;

local rule default_abi ( )
{
    local tmp = sysv ;
    if [ os.name ] = "NT" { tmp = ms ; }
    else if [ os.name ] = "CYGWIN" { tmp = ms ; }
    else if [ os.platform ] = "ARM" { tmp = aapcs ; }
    else if [ os.platform ] = "MIPS32" { tmp = o32 ; }
    else if [ os.platform ] = "MIPS64" { tmp = n64 ; }
    return $(tmp) ;
}

feature.feature abi
   : aapcs
     eabi
     ms
     n32
     n64
     o32
     o64
     sysv
     x32
   : propagated
   ;
feature.set-default abi : [ default_abi ] ;

explicit
    [ alias boost_context : build//boost_context ]
    [ alias all : boost_context test ]
    ;

call-if
    : boost-library context
    : install boost_context
    ;
