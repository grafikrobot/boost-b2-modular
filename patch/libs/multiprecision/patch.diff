diff --git a/config/Jamfile.v2 b/config/Jamfile.v2
index 62c568cc..fee9ce21 100644
--- a/config/Jamfile.v2
+++ b/config/Jamfile.v2
@@ -5,7 +5,7 @@
 
 import modules ;
 import path ;
-import ../../config/checks/config : requires ;
+import config : requires ;
 
 local gmp_path = [ modules.peek : GMP_PATH ] ;
 local mpfr_path = [ modules.peek : MPFR_PATH ] ;
@@ -20,7 +20,6 @@ project : requirements
    <include>$(mpfi_path)
    <include>$(mpfi_path)/src
    <include>$(tommath_path)
-   <include>../../.. 
    <search>$(gmp_path) 
    <search>$(mpfr_path) 
    <search>$(mpfr_path)/build.vc10/lib/Win32/Debug
@@ -37,13 +36,13 @@ project : requirements
    <toolset>gcc:<cxxflags>-Wextra
    ;
 
-lib gmp ;
-lib mpfr ;
-lib mpfi ;
-lib mpc ;
-lib quadmath ;
-lib tommath ;
-lib f2c ;
+searched-lib gmp : : <link>shared ;
+searched-lib mpfr : : <link>shared ;
+searched-lib mpfi : : <link>shared ;
+searched-lib mpc : : <link>shared ;
+searched-lib quadmath : : <link>shared ;
+searched-lib tommath : : <link>shared ;
+searched-lib f2c : : <link>shared ;
 
 actions mp_simple_run_action
 {
diff --git a/example/Jamfile.v2 b/example/Jamfile.v2
index 552969b9..4d6943f0 100644
--- a/example/Jamfile.v2
+++ b/example/Jamfile.v2
@@ -11,7 +11,7 @@
 import testing ;
 import modules ;
 import path ;
-import ../../config/checks/config : requires ;
+import config : requires ;
 
 local ntl-path = [ modules.peek : NTL_PATH ] ;
 local gmp_path = [ modules.peek : GMP_PATH ] ;
@@ -28,8 +28,6 @@ project
      <include>$(mpfi_path)
      <include>$(mpfi_path)/src
      <include>$(tommath_path)
-     <include>../include
-     <include>../../..
      
       <toolset>gcc:<cxxflags>-Wno-missing-braces
       <toolset>darwin:<cxxflags>-Wno-missing-braces
@@ -58,10 +56,10 @@ project
          ]
     ;
 
-lib gmp : : <search>$(gmp_path) ;
-lib mpfr : : <search>$(gmp_path) <search>$(mpfr_path) <search>$(mpfr_path)/build.vc10/lib/Win32/Debug ;
-lib mpfi : : <search>$(gmp_path) <search>$(mpfr_path) <search>$(mpfr_path)/build.vc10/lib/Win32/Debug <search>$(mpfi_path) <search>$(mpfi_path)/src ;
-lib quadmath ;
+searched-lib gmp : : <search>$(gmp_path) ;
+searched-lib mpfr : : <search>$(gmp_path) <search>$(mpfr_path) <search>$(mpfr_path)/build.vc10/lib/Win32/Debug ;
+searched-lib mpfi : : <search>$(gmp_path) <search>$(mpfr_path) <search>$(mpfr_path)/build.vc10/lib/Win32/Debug <search>$(mpfi_path) <search>$(mpfi_path)/src ;
+searched-lib quadmath ;
 
 if $(tommath_path)
 {
@@ -70,7 +68,7 @@ if $(tommath_path)
 }
 else
 {
-   lib tommath : : <search>$(tommath_path) ;
+   searched-lib tommath : : <search>$(tommath_path) ;
    TOMMATH = tommath ;
 }
 
@@ -95,7 +93,7 @@ test-suite examples :
       [ run integer_examples.cpp no_eh_eg_support ]
       [ run logged_adaptor.cpp no_eh_eg_support mpfi mpfr gmp :  :  : [ check-target-builds ../config//has_mpfi : : <build>no ] ]
       [ run mixed_integer_arithmetic.cpp no_eh_eg_support ]
-      [ run numeric_limits_snips.cpp no_eh_eg_support /boost//test_exec_monitor : : : [ requires cxx11_numeric_limits ]  [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
+      [ run numeric_limits_snips.cpp no_eh_eg_support /boost/test//test_exec_monitor : : : [ requires cxx11_numeric_limits ]  [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
       [ run random_snips.cpp gmp no_eh_eg_support : : : [ requires cxx11_explicit_conversion_operators ] [ check-target-builds ../config//has_gmp : : <build>no ] ]
       [ run safe_prime.cpp no_eh_eg_support ]
 
diff --git a/performance/Jamfile.v2 b/performance/Jamfile.v2
index d6d89638..3dfdd337 100644
--- a/performance/Jamfile.v2
+++ b/performance/Jamfile.v2
@@ -5,7 +5,7 @@
 
 import modules ;
 import path ;
-import ../../config/checks/config : requires ;
+import config : requires ;
 
 local ntl-path = [ modules.peek : NTL_PATH ] ;
 local gmp_path = [ modules.peek : GMP_PATH ] ;
@@ -21,7 +21,6 @@ project : requirements
    <include>$(gmp_path)/gmpfrxx 
    <include>$(mpfr_path)
    <include>$(tommath_path)
-   <include>../../.. 
    <search>$(gmp_path) 
    <search>$(mpfr_path) 
    <search>$(mpfr_path)/build.vc10/lib/Win32/Debug
@@ -34,13 +33,16 @@ project : requirements
    <define>BOOST_ALL_NO_LIB
    <debug-symbols>off
    <define>NDEBUG=1
+   <library>/boost/chrono//boost_chrono
+   <source>/boost/math//testing
+   : default-build release
    ;
 
 
-lib gmp ;
-lib mpfr ;
-lib quadmath ;
-lib f2c ;
+searched-lib gmp ;
+searched-lib mpfr ;
+searched-lib quadmath ;
+searched-lib f2c ;
 
 if $(tommath_path)
 {
@@ -48,7 +50,7 @@ if $(tommath_path)
 }
 else
 {
-   lib tommath ;
+   searched-lib tommath ;
    TOMMATH = tommath ;
 }
 
@@ -73,7 +75,7 @@ test-suite performance :
             performance_test_files/test16.cpp  performance_test_files/test33.cpp  performance_test_files/test50.cpp
             performance_test_files/test17.cpp  performance_test_files/test34.cpp  performance_test_files/test51.cpp            
             /boost/system//boost_system
-          : release
+          :
           [ check-target-builds ../config//has_gmp : <define>TEST_MPF <define>TEST_MPZ <define>TEST_MPQ <source>gmp : ]
           [ check-target-builds ../config//has_mpfr : <define>TEST_MPFR <source>mpfr : ]
           [ check-target-builds ../config//has_tommath : <define>TEST_TOMMATH <source>$(TOMMATH) : ]
@@ -92,7 +94,7 @@ test-suite performance :
             miller_rabin_performance_files/test05.cpp  miller_rabin_performance_files/test11.cpp
             miller_rabin_performance_files/test06.cpp  miller_rabin_performance_files/test12.cpp
             /boost/system//boost_system /boost/chrono//boost_chrono 
-          : release
+          :
           [ check-target-builds ../config//has_gmp : <define>TEST_MPF <define>TEST_MPZ <source>gmp : ]
           [ check-target-builds ../config//has_mpfr : <define>TEST_MPFR <source>mpfr : ]
           [ check-target-builds ../config//has_tommath : <define>TEST_TOMMATH <source>$(TOMMATH) : ]
@@ -136,7 +138,7 @@ test-suite performance :
                      sf_performance_files/sf_performance_nct_04.cpp     sf_performance_files/sf_performance_poly_17.cpp
                      sf_performance_files/sf_performance_nct_05.cpp     sf_performance_files/sf_performance_poly_18.cpp
                      /boost/system//boost_system /boost/chrono//boost_chrono /boost/thread//boost_thread
-          : release
+          :
           [ check-target-builds ../config//has_gmp : <define>TEST_MPF <define>TEST_MPZ <source>gmp : ]
           [ check-target-builds ../config//has_mpfr : <define>TEST_MPFR <source>mpfr : ]
           [ check-target-builds ../config//has_float128 : <source>quadmath : ]
@@ -149,107 +151,107 @@ test-suite performance :
           
 [ exe delaunay_test : delaunay_test.cpp /boost/system//boost_system /boost/chrono//boost_chrono ]
 
-[ exe voronoi_performance : voronoi_performance.cpp /boost/system//boost_system /boost/chrono//boost_chrono
-   : release
+[ exe voronoi_performance : voronoi_performance.cpp /boost/system//boost_system /boost/chrono//boost_chrono /boost/polygon//boost_polygon
+   :
           [ check-target-builds ../config//has_gmp : <define>TEST_GMP <source>gmp : ]
           [ check-target-builds ../config//has_tommath : <define>TEST_TOMMATH <source>$(TOMMATH) : ]
    ]
 
 [ obj obj_linpack_benchmark_mpfr : linpack-benchmark.cpp
-          : release
+          :
           [ check-target-builds ../config//has_mpfr : : <build>no ]
           <define>TEST_MPFR_50
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ obj obj_linpack_benchmark_mpf : linpack-benchmark.cpp 
-          : release
+          :
           [ check-target-builds ../config//has_gmp : : <build>no ]
           <define>TEST_MPF_50
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ obj obj_linpack_benchmark_cpp_float : linpack-benchmark.cpp
-          : release
+          :
           <define>TEST_CPP_DEC_FLOAT
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ obj obj_linpack_benchmark_double : linpack-benchmark.cpp
-          : release
+          :
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ obj obj_linpack_benchmark_native_float128 : linpack-benchmark.cpp
-          : release
+          :
           <define>NATIVE_FLOAT128
           [ check-target-builds ../config//has_float128 : : <build>no ]
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ obj obj_linpack_benchmark_float128 : linpack-benchmark.cpp
-          : release
+          :
           <define>TEST_FLOAT128
           [ check-target-builds ../config//has_float128 : : <build>no ]
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ obj obj_linpack_benchmark_cpp_quad_float : linpack-benchmark.cpp
-          : release
+          :
           <define>TEST_CPP_BIN_FLOAT_QUAD
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ obj obj_linpack_benchmark_cpp_oct_float : linpack-benchmark.cpp
-          : release
+          :
           <define>TEST_CPP_BIN_FLOAT_OCT
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ exe linpack_benchmark_mpfr : obj_linpack_benchmark_mpfr mpfr f2c gmp
-          : release
+          :
           [ check-target-builds ../config//has_mpfr : : <build>no ]
           <define>TEST_MPFR_50
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ exe linpack_benchmark_mpf : obj_linpack_benchmark_mpf gmp  f2c
-          : release
+          :
           [ check-target-builds ../config//has_gmp : : <build>no ]
           <define>TEST_MPF_50
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ exe linpack_benchmark_cpp_float : obj_linpack_benchmark_cpp_float  f2c
-          : release
+          :
           <define>TEST_CPP_DEC_FLOAT
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ exe linpack_benchmark_double : obj_linpack_benchmark_double  f2c
-          : release
+          :
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ exe linpack_benchmark_native_float128 : obj_linpack_benchmark_native_float128  f2c quadmath
-          : release
+          :
           [ check-target-builds ../config//has_float128 : : <build>no ]
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ exe linpack_benchmark_float128 : obj_linpack_benchmark_float128  f2c quadmath
-          : release
+          :
           [ check-target-builds ../config//has_float128 : : <build>no ]
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ exe linpack_benchmark_cpp_quad_float : obj_linpack_benchmark_cpp_quad_float  f2c
-          : release
+          :
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
 [ exe linpack_benchmark_cpp_oct_float : obj_linpack_benchmark_cpp_oct_float  f2c
-          : release
+          :
           [ check-target-builds ../config//has_f2c : : <build>no ]
           ]
 
diff --git a/performance/sf_performance.hpp b/performance/sf_performance.hpp
index 1e5d1555..5121062f 100644
--- a/performance/sf_performance.hpp
+++ b/performance/sf_performance.hpp
@@ -48,7 +48,7 @@
 #include <boost/math/special_functions/bessel.hpp>
 #include <boost/math/tools/rational.hpp>
 #include <boost/math/distributions/non_central_t.hpp>
-#include <libs/math/test/table_type.hpp>
+#include <table_type.hpp>
 #include <boost/chrono.hpp>
 #include <boost/array.hpp>
 #include <boost/thread.hpp>
@@ -85,8 +85,8 @@ Real test_bessel()
    {
 #define T double
 #define SC_(x) x
-#include "libs/math/test/bessel_i_int_data.ipp"
-#include "libs/math/test/bessel_i_data.ipp"
+#include "bessel_i_int_data.ipp"
+#include "bessel_i_data.ipp"
 
       Real r;
 
@@ -99,25 +99,25 @@ Real test_bessel()
          r += boost::math::cyl_bessel_i(Real(bessel_i_data[i][0]), Real(bessel_i_data[i][1]));
       }
 
-#include "libs/math/test/bessel_j_int_data.ipp"
+#include "bessel_j_int_data.ipp"
       for (unsigned i = 0; i < bessel_j_int_data.size(); ++i)
       {
          r += boost::math::cyl_bessel_j(Real(bessel_j_int_data[i][0]), Real(bessel_j_int_data[i][1]));
       }
 
-#include "libs/math/test/bessel_j_data.ipp"
+#include "bessel_j_data.ipp"
       for (unsigned i = 0; i < bessel_j_data.size(); ++i)
       {
          r += boost::math::cyl_bessel_j(Real(bessel_j_data[i][0]), Real(bessel_j_data[i][1]));
       }
 
-#include "libs/math/test/bessel_j_large_data.ipp"
+#include "bessel_j_large_data.ipp"
       for (unsigned i = 0; i < bessel_j_large_data.size(); ++i)
       {
          r += boost::math::cyl_bessel_j(Real(bessel_j_large_data[i][0]), Real(bessel_j_large_data[i][1]));
       }
 
-#include "libs/math/test/sph_bessel_data.ipp"
+#include "sph_bessel_data.ipp"
       for (unsigned i = 0; i < sph_bessel_data.size(); ++i)
       {
          r += boost::math::sph_bessel(static_cast<unsigned>(sph_bessel_data[i][0]), Real(sph_bessel_data[i][1]));
@@ -148,7 +148,7 @@ template <class Real>
 Real test_nct()
 {
 #define T double
-#include "libs/math/test/nct.ipp"
+#include "nct.ipp"
 
    Real result = 0;
    for (unsigned i = 0; i < nct.size(); ++i)
diff --git a/test/Jamfile.v2 b/test/Jamfile.v2
index 1a677357..d0b54811 100644
--- a/test/Jamfile.v2
+++ b/test/Jamfile.v2
@@ -6,7 +6,7 @@
 import testing ;
 import modules ;
 import path ;
-import ../../config/checks/config : requires ;
+import config : requires ;
 
 local ntl-path = [ modules.peek : NTL_PATH ] ;
 local gmp_path = [ modules.peek : GMP_PATH ] ;
@@ -42,6 +42,7 @@ local tommath_path = [ modules.peek : TOMMATH_PATH ] ;
 path-constant here : . ;
 
 project : requirements
+   <include>.
    <include>$(gmp_path)
    <include>$(gmp_path)/mpfr
    <include>$(gmp_path)/gmpfrxx
@@ -49,8 +50,6 @@ project : requirements
    <include>$(mpfi_path)
    <include>$(mpfi_path)/src
    <include>$(tommath_path)
-   <include>../include
-   <include>../../..
    # We set these to make it easier to set up and test GMP and MPFR under Win32:
    <toolset>msvc:<runtime-link>static
    <toolset>msvc:<link>static
@@ -92,11 +91,11 @@ project : requirements
 local enable-specfun = [ MATCH (--enable-specfun) : [ modules.peek : ARGV ] ] ;
 local disable-concepts = [ MATCH (--disable-concepts) : [ modules.peek : ARGV ] ] ;
 
-lib gmp : : <search>$(gmp_path) ;
-lib mpfr : : <search>$(gmp_path) <search>$(mpfr_path) <search>$(mpfr_path)/build.vc10/lib/Win32/Debug ;
-lib mpfi : : <search>$(gmp_path) <search>$(mpfr_path) <search>$(mpfr_path)/build.vc10/lib/Win32/Debug <search>$(mpfi_path) <search>$(mpfi_path)/src ;
-lib quadmath ;
-lib mpc ;
+searched-lib gmp : : <search>$(gmp_path) ;
+searched-lib mpfr : : <search>$(gmp_path) <search>$(mpfr_path) <search>$(mpfr_path)/build.vc10/lib/Win32/Debug ;
+searched-lib mpfi : : <search>$(gmp_path) <search>$(mpfr_path) <search>$(mpfr_path)/build.vc10/lib/Win32/Debug <search>$(mpfi_path) <search>$(mpfi_path)/src ;
+searched-lib quadmath ;
+searched-lib mpc ;
 
 if $(tommath_path)
 {
@@ -105,7 +104,7 @@ if $(tommath_path)
 }
 else
 {
-   lib tommath : : <search>$(tommath_path) ;
+   searched-lib tommath : : <search>$(tommath_path) ;
    TOMMATH = tommath ;
 }
 
@@ -132,7 +131,7 @@ test-suite arithmetic_tests :
    [ run test_arithmetic_mpf.cpp gmp no_eh_support : : : [ check-target-builds ../config//has_gmp : : <build>no ] [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
    [ run test_arithmetic_mpz.cpp gmp no_eh_support : : : [ check-target-builds ../config//has_gmp : : <build>no ] [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
    [ run test_arithmetic_mpz_rat.cpp gmp no_eh_support : : : [ check-target-builds ../config//has_gmp : : <build>no ] [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
-   [ run test_arithmetic_mpz_br.cpp gmp no_eh_support : : : [ check-target-builds ../config//has_gmp : : <build>no ] [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
+   [ run test_arithmetic_mpz_br.cpp gmp no_eh_support /boost/rational//boost_rational : : : [ check-target-builds ../config//has_gmp : : <build>no ] [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
    [ run test_arithmetic_mpq.cpp gmp no_eh_support : : : [ check-target-builds ../config//has_gmp : : <build>no ] [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
 
    [ run test_arithmetic_mpfr.cpp mpfr gmp no_eh_support : : : [ check-target-builds ../config//has_mpfr : : <build>no ] [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
@@ -141,7 +140,7 @@ test-suite arithmetic_tests :
 
    [ run test_arithmetic_tommath.cpp $(TOMMATH) no_eh_support : : : [ check-target-builds ../config//has_tommath : : <build>no ] [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
    [ run test_arithmetic_tommath_rat.cpp $(TOMMATH) no_eh_support : : : [ check-target-builds ../config//has_tommath : : <build>no ] [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
-   [ run test_arithmetic_tommath_br.cpp $(TOMMATH) no_eh_support : : : [ check-target-builds ../config//has_tommath : : <build>no ] [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
+   [ run test_arithmetic_tommath_br.cpp /boost/rational//boost_rational $(TOMMATH) no_eh_support : : : [ check-target-builds ../config//has_tommath : : <build>no ] [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
 
    [ run test_arithmetic_cpp_int_1.cpp no_eh_support : : : <toolset>msvc:<cxxflags>-bigobj [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
    [ run test_arithmetic_cpp_int_2.cpp no_eh_support  : : : <toolset>msvc:<cxxflags>-bigobj [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
@@ -166,7 +165,7 @@ test-suite arithmetic_tests :
    [ run test_arithmetic_cpp_int_21.cpp no_eh_support : : : <toolset>msvc:<cxxflags>-bigobj [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
    [ run test_arithmetic_cpp_int_22.cpp no_eh_support : : : <toolset>msvc:<cxxflags>-bigobj [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
    [ run test_arithmetic_cpp_int_23.cpp no_eh_support : : : <toolset>msvc:<cxxflags>-bigobj [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
-   [ run test_arithmetic_cpp_int_br.cpp no_eh_support  : : : <toolset>msvc:<cxxflags>-bigobj [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
+   [ run test_arithmetic_cpp_int_br.cpp no_eh_support /boost/rational//boost_rational : : : <toolset>msvc:<cxxflags>-bigobj [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
 
    [ run test_arithmetic_ab_1.cpp no_eh_support : : : [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
    [ run test_arithmetic_ab_2.cpp no_eh_support : : : [ check-target-builds ../config//has_float128 : <source>quadmath ] ]
@@ -771,7 +770,7 @@ test-suite conversions :
                [ check-target-builds ../config//has_intel_quad : <cxxflags>-Qoption,cpp,--extended_float_type : <build>no ] [ check-target-builds ../config//has_float128 : <source>quadmath ]
               : test_float_io_intel_quad ]
 
-      [ run test_int_io.cpp no_eh_support $(TOMMATH)
+      [ run test_int_io.cpp no_eh_support $(TOMMATH) /boost/algorithm//boost_algorithm
               : # command line
               : # input files
               : # requirements
@@ -780,7 +779,7 @@ test-suite conversions :
                [ check-target-builds ../config//has_tommath : : <build>no ]
               : test_int_io_tommath ]
 
-      [ run test_int_io.cpp no_eh_support gmp
+      [ run test_int_io.cpp no_eh_support gmp /boost/algorithm//boost_algorithm
               : # command line
               : # input files
               : # requirements
@@ -789,21 +788,21 @@ test-suite conversions :
                [ check-target-builds ../config//has_gmp : : <build>no ]
               : test_int_io_mpz ]
 
-      [ run test_fixed_zero_precision_io.cpp 
+      [ run test_fixed_zero_precision_io.cpp /boost/chrono//boost_chrono
               : # command line
               : # input files
               : # requirements
               <define>TEST_BIN_FLOAT
                release
               : test_fixed_zero_precision_io_bin_float ]
-      [ run test_fixed_zero_precision_io.cpp 
+      [ run test_fixed_zero_precision_io.cpp  /boost/chrono//boost_chrono
               : # command line
               : # input files
               : # requirements
               <define>TEST_DEC_FLOAT
                release
               : test_fixed_zero_precision_io_dec_float ]
-      [ run test_fixed_zero_precision_io.cpp no_eh_support gmp
+      [ run test_fixed_zero_precision_io.cpp no_eh_support gmp /boost/chrono//boost_chrono
               : # command line
               : # input files
               : # requirements
@@ -811,7 +810,7 @@ test-suite conversions :
                release
                [ check-target-builds ../config//has_gmp : : <build>no ]
               : test_fixed_zero_precision_io_mpf_float ]
-      [ run test_fixed_zero_precision_io.cpp no_eh_support mpfr gmp
+      [ run test_fixed_zero_precision_io.cpp no_eh_support mpfr gmp /boost/chrono//boost_chrono
               : # command line
               : # input files
               : # requirements
@@ -819,7 +818,7 @@ test-suite conversions :
                release
                [ check-target-builds ../config//has_mpfr : : <build>no ]
               : test_fixed_zero_precision_io_mpfr_float ]
-      [ run test_fixed_zero_precision_io.cpp no_eh_support quadmath
+      [ run test_fixed_zero_precision_io.cpp no_eh_support quadmath /boost/chrono//boost_chrono
               : # command line
               : # input files
               : # requirements
@@ -874,7 +873,7 @@ test-suite conversions :
 
 test-suite cpp_int_tests :
 
-      [ run test_int_io.cpp no_eh_support
+      [ run test_int_io.cpp no_eh_support /boost/algorithm//boost_algorithm
            : # command line
            : # input files
            : # requirements
@@ -1000,12 +999,12 @@ test-suite cpp_int_tests :
       [ run test_checked_cpp_int.cpp no_eh_support ]
       [ run test_unchecked_cpp_int.cpp no_eh_support : : : release ]
 
-      [ run test_cpp_int_serial.cpp ../../serialization/build//boost_serialization : : : release <define>TEST1 <toolset>gcc-mingw:<link>static : test_cpp_int_serial_1 ]
-      [ run test_cpp_int_serial.cpp ../../serialization/build//boost_serialization : : : release <define>TEST2 <toolset>gcc-mingw:<link>static : test_cpp_int_serial_2 ]
-      [ run test_cpp_int_serial.cpp ../../serialization/build//boost_serialization : : : release <define>TEST3 <toolset>gcc-mingw:<link>static : test_cpp_int_serial_3 ]
-      [ run test_cpp_int_serial.cpp ../../serialization/build//boost_serialization : : : release <define>TEST4 <toolset>gcc-mingw:<link>static : test_cpp_int_serial_4 ]
-      [ run test_cpp_int_deserial.cpp ../../serialization/build//boost_serialization ../../filesystem/build//boost_filesystem : $(here)/serial_txts : : release <toolset>gcc-mingw:<link>static  ]
-      [ run test_cpp_rat_serial.cpp ../../serialization/build//boost_serialization : : : release <toolset>gcc-mingw:<link>static  ]
+      [ run test_cpp_int_serial.cpp /boost/serialization//boost_serialization : : : release <define>TEST1 <toolset>gcc-mingw:<link>static : test_cpp_int_serial_1 ]
+      [ run test_cpp_int_serial.cpp /boost/serialization//boost_serialization : : : release <define>TEST2 <toolset>gcc-mingw:<link>static : test_cpp_int_serial_2 ]
+      [ run test_cpp_int_serial.cpp /boost/serialization//boost_serialization : : : release <define>TEST3 <toolset>gcc-mingw:<link>static : test_cpp_int_serial_3 ]
+      [ run test_cpp_int_serial.cpp /boost/serialization//boost_serialization : : : release <define>TEST4 <toolset>gcc-mingw:<link>static : test_cpp_int_serial_4 ]
+      [ run test_cpp_int_deserial.cpp /boost/serialization//boost_serialization /boost/filesystem//boost_filesystem : $(here)/serial_txts : : release <toolset>gcc-mingw:<link>static  ]
+      [ run test_cpp_rat_serial.cpp /boost/serialization//boost_serialization : : : release <toolset>gcc-mingw:<link>static  ]
       [ run test_gcd.cpp : : : [ requires cxx11_hdr_random ] ]
 ;
 
@@ -1026,8 +1025,8 @@ test-suite misc :
       [ run constexpr_test_cpp_int_3.cpp : : : [ requires cxx14_constexpr cxx17_if_constexpr ] [ check-target-builds ../config//has_is_constant_evaluated : : <build>no ] ]
       [ run constexpr_test_cpp_int_4.cpp : : : [ requires cxx14_constexpr cxx17_if_constexpr ] [ check-target-builds ../config//has_is_constant_evaluated : : <build>no ] ]
       [ run constexpr_test_cpp_int_5.cpp : : : [ requires cxx14_constexpr cxx17_if_constexpr ] [ check-target-builds ../config//has_is_constant_evaluated : : <build>no ] ]
-      [ run constexpr_test_cpp_int_6.cpp : : : [ requires cxx14_constexpr cxx17_if_constexpr ] [ check-target-builds ../config//has_is_constant_evaluated : <toolset>msvc:<cxxflags>-constexpr:steps10000000 <toolset>clang:<cxxflags>-fconstexpr-steps=268435456 : <build>no ] [ check-target-builds ../config//has_constexpr_limits : <cxxflags>-fconstexpr-ops-limit=268435456 ] ]
-      [ run constexpr_test_cpp_int_7.cpp : : : [ requires cxx14_constexpr cxx17_if_constexpr ] [ check-target-builds ../config//has_is_constant_evaluated : <toolset>msvc:<cxxflags>-constexpr:steps10000000 <toolset>clang:<cxxflags>-fconstexpr-steps=268435456 : <build>no ] ]
+      [ run constexpr_test_cpp_int_6.cpp : : : [ requires cxx14_constexpr cxx17_if_constexpr ] [ check-target-builds ../config//has_is_constant_evaluated : "<toolset>msvc:<cxxflags>-constexpr:steps10000000" <toolset>clang:<cxxflags>-fconstexpr-steps=268435456 : <build>no ] [ check-target-builds ../config//has_constexpr_limits : <cxxflags>-fconstexpr-ops-limit=268435456 ] ]
+      [ run constexpr_test_cpp_int_7.cpp : : : [ requires cxx14_constexpr cxx17_if_constexpr ] [ check-target-builds ../config//has_is_constant_evaluated : "<toolset>msvc:<cxxflags>-constexpr:steps10000000" <toolset>clang:<cxxflags>-fconstexpr-steps=268435456 : <build>no ] ]
 
       [ compile test_nothrow_cpp_int.cpp ]
       [ compile test_nothrow_cpp_rational.cpp ]
@@ -1045,7 +1044,7 @@ test-suite misc :
                release  # otherwise [ runtime is too slow!!
                ]
 
-      [ run test_rational_io.cpp $(TOMMATH) no_eh_support
+      [ run test_rational_io.cpp $(TOMMATH) no_eh_support /boost/algorithm//boost_algorithm /boost/rational//boost_rational
               : # command line
               : # input files
               : # requirements
@@ -1054,7 +1053,7 @@ test-suite misc :
                release # Otherwise [ runtime is slow
               : test_rational_io_tommath ]
 
-      [ run test_rational_io.cpp gmp no_eh_support
+      [ run test_rational_io.cpp gmp no_eh_support /boost/algorithm//boost_algorithm /boost/rational//boost_rational
               : # command line
               : # input files
               : # requirements
@@ -1063,7 +1062,7 @@ test-suite misc :
                release # Otherwise [ runtime is slow
               : test_rational_io_mpz ]
 
-      [ run test_rational_io.cpp no_eh_support
+      [ run test_rational_io.cpp no_eh_support /boost/algorithm//boost_algorithm /boost/rational//boost_rational
               : # command line
               : # input files
               : # requirements
@@ -1150,7 +1149,7 @@ test-suite misc :
               : test_rat_float_interconv_8 ]
 
       [ run test_cpp_int_conv.cpp no_eh_support ]
-      [ run test_cpp_int_import_export.cpp no_eh_support ]
+      [ run test_cpp_int_import_export.cpp no_eh_support /boost/algorithm//boost_algorithm ]
       [ run test_native_integer.cpp no_eh_support ]
 
       [ run test_mixed_move_cpp_int.cpp no_eh_support ]
@@ -1174,31 +1173,31 @@ test-suite misc :
       [ compile include_test/cpp_dec_float_include_test.cpp ]
       [ compile include_test/cpp_bin_float_include_test.cpp ]
 
-      [ run ublas_interop/test1.cpp ublas_interop/test11.cpp ublas_interop/test12.cpp ublas_interop/test13.cpp no_eh_support ]
-      [ run ublas_interop/test2.cpp ublas_interop/test21.cpp ublas_interop/test22.cpp ublas_interop/test23.cpp no_eh_support ]
-      #[ run ublas_interop/test3.cpp ublas_interop/test31.cpp ublas_interop/test32.cpp ublas_interop/test33.cpp ]
-      [ run ublas_interop/test4.cpp ublas_interop/test42.cpp ublas_interop/test43.cpp no_eh_support ]
-      [ run ublas_interop/test5.cpp ublas_interop/test52.cpp ublas_interop/test53.cpp no_eh_support ]
-      [ run ublas_interop/test6.cpp ublas_interop/test62.cpp ublas_interop/test63.cpp no_eh_support ]
-      #[ run ublas_interop/test7.cpp ublas_interop/test71.cpp ublas_interop/test72.cpp ublas_interop/test73.cpp ]
-
-      [ run ublas_interop/test1.cpp ublas_interop/test11.cpp ublas_interop/test12.cpp ublas_interop/test13.cpp no_eh_support : : : <define>TEST_ET=1 : ublas1_et ]
-      [ run ublas_interop/test2.cpp ublas_interop/test21.cpp ublas_interop/test22.cpp ublas_interop/test23.cpp no_eh_support : : : <define>TEST_ET=1 : ublas2_et ]
-      #[ run ublas_interop/test3.cpp ublas_interop/test31.cpp ublas_interop/test32.cpp ublas_interop/test33.cpp : : : <define>TEST_ET=1 : ublas3_et ]
-      [ run ublas_interop/test4.cpp ublas_interop/test42.cpp ublas_interop/test43.cpp no_eh_support : : : <define>TEST_ET=1 : ublas3_et ]
-      [ run ublas_interop/test5.cpp ublas_interop/test52.cpp ublas_interop/test53.cpp no_eh_support : : : <define>TEST_ET=1 : ublas4_et ]
-      [ run ublas_interop/test6.cpp ublas_interop/test62.cpp ublas_interop/test63.cpp no_eh_support : : : <define>TEST_ET=1 : ublas5_et ]
-      #[ run ublas_interop/test7.cpp ublas_interop/test71.cpp ublas_interop/test72.cpp ublas_interop/test73.cpp : : : <define>TEST_ET=1 : ublas6_et ]
+      [ run ublas_interop/test1.cpp ublas_interop/test11.cpp ublas_interop/test12.cpp ublas_interop/test13.cpp no_eh_support /boost/ublas//boost_ublas ]
+      [ run ublas_interop/test2.cpp ublas_interop/test21.cpp ublas_interop/test22.cpp ublas_interop/test23.cpp no_eh_support /boost/ublas//boost_ublas ]
+      #[ run ublas_interop/test3.cpp ublas_interop/test31.cpp ublas_interop/test32.cpp ublas_interop/test33.cpp /boost/ublas//boost_ublas ]
+      [ run ublas_interop/test4.cpp ublas_interop/test42.cpp ublas_interop/test43.cpp no_eh_support /boost/ublas//boost_ublas ]
+      [ run ublas_interop/test5.cpp ublas_interop/test52.cpp ublas_interop/test53.cpp no_eh_support /boost/ublas//boost_ublas ]
+      [ run ublas_interop/test6.cpp ublas_interop/test62.cpp ublas_interop/test63.cpp no_eh_support /boost/ublas//boost_ublas ]
+      #[ run ublas_interop/test7.cpp ublas_interop/test71.cpp ublas_interop/test72.cpp ublas_interop/test73.cpp /boost/ublas//boost_ublas ]
+
+      [ run ublas_interop/test1.cpp ublas_interop/test11.cpp ublas_interop/test12.cpp ublas_interop/test13.cpp no_eh_support /boost/ublas//boost_ublas : : : <define>TEST_ET=1 : ublas1_et ]
+      [ run ublas_interop/test2.cpp ublas_interop/test21.cpp ublas_interop/test22.cpp ublas_interop/test23.cpp no_eh_support /boost/ublas//boost_ublas : : : <define>TEST_ET=1 : ublas2_et ]
+      #[ run ublas_interop/test3.cpp ublas_interop/test31.cpp ublas_interop/test32.cpp ublas_interop/test33.cpp /boost/ublas//boost_ublas : : : <define>TEST_ET=1 : ublas3_et ]
+      [ run ublas_interop/test4.cpp ublas_interop/test42.cpp ublas_interop/test43.cpp no_eh_support /boost/ublas//boost_ublas : : : <define>TEST_ET=1 : ublas3_et ]
+      [ run ublas_interop/test5.cpp ublas_interop/test52.cpp ublas_interop/test53.cpp no_eh_support /boost/ublas//boost_ublas : : : <define>TEST_ET=1 : ublas4_et ]
+      [ run ublas_interop/test6.cpp ublas_interop/test62.cpp ublas_interop/test63.cpp no_eh_support /boost/ublas//boost_ublas : : : <define>TEST_ET=1 : ublas5_et ]
+      #[ run ublas_interop/test7.cpp ublas_interop/test71.cpp ublas_interop/test72.cpp ublas_interop/test73.cpp /boost/ublas//boost_ublas : : : <define>TEST_ET=1 : ublas6_et ]
 
       #
       # Serialization tests, run in release mode so we cycle through more values:
       #
-      [ run test_adapt_serial.cpp ../../serialization/build//boost_serialization : : : release <toolset>gcc-mingw:<link>static  ]
-      [ run test_cpp_dec_float_serial.cpp ../../serialization/build//boost_serialization : : : release <define>TEST1 <toolset>gcc-mingw:<link>static  : test_cpp_dec_float_serial_1 ]
-      [ run test_cpp_dec_float_serial.cpp ../../serialization/build//boost_serialization : : : release <define>TEST2 <toolset>gcc-mingw:<link>static  : test_cpp_dec_float_serial_2 ]
-      [ run test_float128_serial.cpp ../../serialization/build//boost_serialization quadmath : : : release <toolset>gcc-mingw:<link>static  [ check-target-builds ../config//has_float128 : : <build>no ]  ]
-      [ run test_cpp_bin_float_serial.cpp ../../serialization/build//boost_serialization : : : release <toolset>gcc-mingw:<link>static  <define>TEST1 : test_bin_dec_float_serial_1 ]
-      [ run test_cpp_bin_float_serial.cpp ../../serialization/build//boost_serialization : : : release <define>TEST2 <toolset>gcc-mingw:<link>static  : test_bin_dec_float_serial_2 ]
+      [ run test_adapt_serial.cpp /boost/serialization//boost_serialization : : : release <toolset>gcc-mingw:<link>static  ]
+      [ run test_cpp_dec_float_serial.cpp /boost/serialization//boost_serialization : : : release <define>TEST1 <toolset>gcc-mingw:<link>static  : test_cpp_dec_float_serial_1 ]
+      [ run test_cpp_dec_float_serial.cpp /boost/serialization//boost_serialization : : : release <define>TEST2 <toolset>gcc-mingw:<link>static  : test_cpp_dec_float_serial_2 ]
+      [ run test_float128_serial.cpp /boost/serialization//boost_serialization quadmath : : : release <toolset>gcc-mingw:<link>static  [ check-target-builds ../config//has_float128 : : <build>no ]  ]
+      [ run test_cpp_bin_float_serial.cpp /boost/serialization//boost_serialization : : : release <toolset>gcc-mingw:<link>static  <define>TEST1 : test_bin_dec_float_serial_1 ]
+      [ run test_cpp_bin_float_serial.cpp /boost/serialization//boost_serialization : : : release <define>TEST2 <toolset>gcc-mingw:<link>static  : test_bin_dec_float_serial_2 ]
 
       #
       # Mixed mode comparison tests, see: https://svn.boost.org/trac/boost/ticket/11328
@@ -1342,7 +1341,7 @@ rule get_specfun_tests_mpfr
             <define>BOOST_ALL_NO_LIB
             <define>BOOST_OPTIONAL_USE_OLD_DEFINITION_OF_NONE
             <toolset>msvc:<cxxflags>-bigobj
-            <include>../../math/include_private
+            <source>/boost/math//testing
             release
            : $(source:B)_mpfr ] ;
    }
@@ -1359,7 +1358,7 @@ rule get_specfun_tests_mpfr
             <toolset>msvc:<cxxflags>-bigobj
             [ check-target-builds ../config//has_mpfr : <define>TEST_MPFR <source>gmp <source>mpfr : <build>no ]
             [ check-target-builds ../config//has_float128 : <source>quadmath ]
-            <include>../../math/include_private
+            <source>/boost/math//testing
             release
             : test_gamma_mpfr_$(digits) ] ;
 
@@ -1384,7 +1383,7 @@ rule get_specfun_tests_gmp
             <define>TEST_MPF_50
             <define>BOOST_ALL_NO_LIB
             <toolset>msvc:<cxxflags>-bigobj
-            <include>../../math/include_private
+            <source>/boost/math//testing
             release
            : $(source:B)_mpf ] ;
    }
@@ -1401,7 +1400,7 @@ rule get_specfun_tests_gmp
             <toolset>msvc:<cxxflags>-bigobj
             [ check-target-builds ../config//has_gmp : <define>TEST_MPF <source>gmp : <build>no ]
             [ check-target-builds ../config//has_float128 : <source>quadmath ]
-            <include>../../math/include_private
+            <source>/boost/math//testing
             release
             : test_gamma_gmp_$(digits) ] ;
 
@@ -1423,7 +1422,7 @@ rule get_specfun_tests_cpp_dec_float
             <define>TEST_CPP_DEC_FLOAT
             <define>BOOST_ALL_NO_LIB
             <toolset>msvc:<cxxflags>-bigobj
-            <include>../../math/include_private
+            <source>/boost/math//testing
             release
            : $(source:B)_cpp_dec_float ] ;
    }
@@ -1439,7 +1438,7 @@ rule get_specfun_tests_cpp_dec_float
             <define>TEST_PRECISION=$(digits)
             <toolset>msvc:<cxxflags>-bigobj
             <define>TEST_CPP_DEC_FLOAT
-            <include>../../math/include_private
+            <source>/boost/math//testing
             release
             : test_gamma_cpp_dec_float_$(digits) ] ;
    }
@@ -1459,7 +1458,7 @@ rule get_specfun_tests_cpp_bin_float
             <define>TEST_CPP_BIN_FLOAT
             <define>BOOST_ALL_NO_LIB
             <toolset>msvc:<cxxflags>-bigobj
-            <include>../../math/include_private
+            <source>/boost/math//testing
             release
             [ check-target-builds ../config//has_float128 : <source>quadmath ]
            : $(source:B)_cpp_bin_float ] ;
@@ -1477,7 +1476,7 @@ rule get_specfun_tests_cpp_bin_float
             <toolset>msvc:<cxxflags>-bigobj
             <define>TEST_CPP_BIN_FLOAT
             [ check-target-builds ../config//has_float128 : <source>quadmath ]
-            <include>../../math/include_private
+            <source>/boost/math//testing
             release
             : test_gamma_cpp_bin_float_$(digits) ] ;
 
@@ -1502,7 +1501,7 @@ rule get_specfun_tests_float128
             <define>BOOST_ALL_NO_LIB
             <define>BOOST_OPTIONAL_USE_OLD_DEFINITION_OF_NONE
             <toolset>msvc:<cxxflags>-bigobj
-            <include>../../math/include_private
+            <source>/boost/math//testing
             release
            : $(source:B)_float128 ] ;
    }
@@ -1527,7 +1526,7 @@ rule get_specfun_tests_intel_quad
             <define>BOOST_ALL_NO_LIB
             <define>BOOST_OPTIONAL_USE_OLD_DEFINITION_OF_NONE
             <toolset>msvc:<cxxflags>-bigobj
-            <include>../../math/include_private
+            <source>/boost/math//testing
             release
            : $(source:B)_intel_quad ] ;
    }
@@ -1575,7 +1574,7 @@ rule get_concept_checks
    for local source in [ glob concepts/*.cpp ]
    {
 
-      result += [ compile $(source)  mpfr
+      result += [ compile $(source)  mpfr /boost/math//boost_math /boost/math//testing
               : # requirements
               <define>TEST_MPFR_50
                [ check-target-builds ../config//has_mpfr : : <build>no ]
@@ -1583,7 +1582,7 @@ rule get_concept_checks
                <optimization>space
               : $(source:B)_mpfr_50 ] ;
 
-      result += [ compile $(source)  mpfr
+      result += [ compile $(source)  mpfr /boost/math//boost_math /boost/math//testing
               : # requirements
               <define>TEST_MPFR_6
                [ check-target-builds ../config//has_mpfr : : <build>no ]
@@ -1591,7 +1590,7 @@ rule get_concept_checks
                <optimization>space
               : $(source:B)_mpfr_6 ] ;
 
-      result += [ compile $(source)  mpfr
+      result += [ compile $(source)  mpfr /boost/math//boost_math /boost/math//testing
               : # requirements
               <define>TEST_MPFR_15
                [ check-target-builds ../config//has_mpfr : : <build>no ]
@@ -1599,7 +1598,7 @@ rule get_concept_checks
                <optimization>space
               : $(source:B)_mpfr_15 ] ;
 
-      result += [ compile $(source)  mpfr
+      result += [ compile $(source)  mpfr /boost/math//boost_math /boost/math//testing
               : # requirements
               <define>TEST_MPFR_17
                [ check-target-builds ../config//has_mpfr : : <build>no ]
@@ -1607,7 +1606,7 @@ rule get_concept_checks
                <optimization>space
               : $(source:B)_mpfr_17 ] ;
 
-      result += [ compile $(source)  mpfr
+      result += [ compile $(source)  mpfr /boost/math//boost_math /boost/math//testing
               : # requirements
               <define>TEST_MPFR_30
                [ check-target-builds ../config//has_mpfr : : <build>no ]
@@ -1615,7 +1614,7 @@ rule get_concept_checks
                <optimization>space
               : $(source:B)_mpfr_30 ] ;
 
-      result += [ compile $(source)  gmp
+      result += [ compile $(source)  gmp /boost/math//boost_math /boost/math//testing
               : # requirements
               <define>TEST_MPF_50
                [ check-target-builds ../config//has_gmp : : <build>no ]
@@ -1623,35 +1622,35 @@ rule get_concept_checks
                <optimization>space
               : $(source:B)_mpf50 ] ;
 
-      result += [ compile $(source)
+      result += [ compile $(source) /boost/math//boost_math /boost/math//testing
               : # requirements
               <define>TEST_CPP_DEC_FLOAT
                <debug-symbols>off
                <optimization>space
               : $(source:B)_cpp_dec_float ] ;
 
-      result += [ compile $(source)
+      result += [ compile $(source) /boost/math//boost_math /boost/math//testing
               : # requirements
               <define>TEST_CPP_BIN_FLOAT
                <debug-symbols>off
                <optimization>space
               : $(source:B)_cpp_bin_float ] ;
 
-      result += [ compile $(source)
+      result += [ compile $(source) /boost/math//boost_math /boost/math//testing
               : # requirements
               <define>TEST_CPP_DEC_FLOAT_NO_ET
                <debug-symbols>off
                <optimization>space
               : $(source:B)_cpp_dec_float_no_et ] ;
 
-      result += [ compile $(source)
+      result += [ compile $(source) /boost/math//boost_math /boost/math//testing
               : # requirements
               <define>TEST_BACKEND
                <debug-symbols>off
                <optimization>space
               : $(source:B)_backend_concept ] ;
 
-      result += [ compile $(source)
+      result += [ compile $(source) /boost/math//boost_math /boost/math//testing
               : # requirements
               <define>TEST_LOGGED_ADAPTER
                <debug-symbols>off
diff --git a/test/concepts/number_concept_check.cpp b/test/concepts/number_concept_check.cpp
index dc1e0239..0a19286e 100644
--- a/test/concepts/number_concept_check.cpp
+++ b/test/concepts/number_concept_check.cpp
@@ -17,7 +17,7 @@
 #endif
 
 #include <boost/container_hash/hash.hpp>
-#include <libs/math/test/compile_test/poison.hpp>
+#include <compile_test/poison.hpp>
 
 #if !defined(TEST_MPF_50) && !defined(TEST_BACKEND) && !defined(TEST_MPZ) && !defined(TEST_CPP_DEC_FLOAT) && !defined(TEST_MPFR_50) && !defined(TEST_MPFR_6) && !defined(TEST_MPFR_15) && !defined(TEST_MPFR_17) && !defined(TEST_MPFR_30) && !defined(TEST_CPP_DEC_FLOAT_NO_ET) && !defined(TEST_LOGGED_ADAPTER) && !defined(TEST_CPP_BIN_FLOAT)
 #define TEST_MPF_50
diff --git a/test/concepts/sf_concept_check_basic.cpp b/test/concepts/sf_concept_check_basic.cpp
index 4f062d8a..747e3120 100644
--- a/test/concepts/sf_concept_check_basic.cpp
+++ b/test/concepts/sf_concept_check_basic.cpp
@@ -19,7 +19,7 @@
 #endif
 
 #include <boost/container_hash/hash.hpp>
-#include <libs/math/test/compile_test/poison.hpp>
+#include <compile_test/poison.hpp>
 
 #if !defined(TEST_MPF_50) && !defined(TEST_BACKEND) && !defined(TEST_MPZ) && !defined(TEST_CPP_DEC_FLOAT) && !defined(TEST_MPFR_50) && !defined(TEST_MPFR_6) && !defined(TEST_MPFR_15) && !defined(TEST_MPFR_17) && !defined(TEST_MPFR_30) && !defined(TEST_CPP_DEC_FLOAT_NO_ET) && !defined(TEST_LOGGED_ADAPTER) && !defined(TEST_CPP_BIN_FLOAT)
 #define TEST_MPF_50
diff --git a/test/concepts/sf_concept_check_bessel.cpp b/test/concepts/sf_concept_check_bessel.cpp
index ed499395..4ff08498 100644
--- a/test/concepts/sf_concept_check_bessel.cpp
+++ b/test/concepts/sf_concept_check_bessel.cpp
@@ -19,7 +19,7 @@
 #endif
 
 #include <boost/container_hash/hash.hpp>
-#include <libs/math/test/compile_test/poison.hpp>
+#include <compile_test/poison.hpp>
 
 #if !defined(TEST_MPF_50) && !defined(TEST_BACKEND) && !defined(TEST_MPZ) && !defined(TEST_CPP_DEC_FLOAT) && !defined(TEST_MPFR_50) && !defined(TEST_MPFR_6) && !defined(TEST_MPFR_15) && !defined(TEST_MPFR_17) && !defined(TEST_MPFR_30) && !defined(TEST_CPP_DEC_FLOAT_NO_ET) && !defined(TEST_LOGGED_ADAPTER) && !defined(TEST_CPP_BIN_FLOAT)
 #define TEST_MPF_50
diff --git a/test/concepts/sf_concept_check_beta.cpp b/test/concepts/sf_concept_check_beta.cpp
index 657cd1cb..242edbbd 100644
--- a/test/concepts/sf_concept_check_beta.cpp
+++ b/test/concepts/sf_concept_check_beta.cpp
@@ -19,7 +19,7 @@
 #endif
 
 #include <boost/container_hash/hash.hpp>
-#include <libs/math/test/compile_test/poison.hpp>
+#include <compile_test/poison.hpp>
 
 #if !defined(TEST_MPF_50) && !defined(TEST_BACKEND) && !defined(TEST_MPZ) && !defined(TEST_CPP_DEC_FLOAT) && !defined(TEST_MPFR_50) && !defined(TEST_MPFR_6) && !defined(TEST_MPFR_15) && !defined(TEST_MPFR_17) && !defined(TEST_MPFR_30) && !defined(TEST_CPP_DEC_FLOAT_NO_ET) && !defined(TEST_LOGGED_ADAPTER) && !defined(TEST_CPP_BIN_FLOAT)
 #define TEST_MPF_50
diff --git a/test/concepts/sf_concept_check_beta_2.cpp b/test/concepts/sf_concept_check_beta_2.cpp
index a0597f08..9b94c98d 100644
--- a/test/concepts/sf_concept_check_beta_2.cpp
+++ b/test/concepts/sf_concept_check_beta_2.cpp
@@ -20,7 +20,7 @@
 #endif
 
 #include <boost/container_hash/hash.hpp>
-#include <libs/math/test/compile_test/poison.hpp>
+#include <compile_test/poison.hpp>
 
 #if !defined(TEST_MPF_50) && !defined(TEST_BACKEND) && !defined(TEST_MPZ) && !defined(TEST_CPP_DEC_FLOAT) && !defined(TEST_MPFR_50) && !defined(TEST_MPFR_6) && !defined(TEST_MPFR_15) && !defined(TEST_MPFR_17) && !defined(TEST_MPFR_30) && !defined(TEST_CPP_DEC_FLOAT_NO_ET) && !defined(TEST_LOGGED_ADAPTER) && !defined(TEST_CPP_BIN_FLOAT)
 #define TEST_MPF_50
diff --git a/test/concepts/sf_concept_check_beta_3.cpp b/test/concepts/sf_concept_check_beta_3.cpp
index f90ed839..997f30f3 100644
--- a/test/concepts/sf_concept_check_beta_3.cpp
+++ b/test/concepts/sf_concept_check_beta_3.cpp
@@ -19,7 +19,7 @@
 #endif
 
 #include <boost/container_hash/hash.hpp>
-#include <libs/math/test/compile_test/poison.hpp>
+#include <compile_test/poison.hpp>
 
 #if !defined(TEST_MPF_50) && !defined(TEST_BACKEND) && !defined(TEST_MPZ) && !defined(TEST_CPP_DEC_FLOAT) && !defined(TEST_MPFR_50) && !defined(TEST_MPFR_6) && !defined(TEST_MPFR_15) && !defined(TEST_MPFR_17) && !defined(TEST_MPFR_30) && !defined(TEST_CPP_DEC_FLOAT_NO_ET) && !defined(TEST_LOGGED_ADAPTER) && !defined(TEST_CPP_BIN_FLOAT)
 #define TEST_MPF_50
diff --git a/test/concepts/sf_concept_check_elliptic.cpp b/test/concepts/sf_concept_check_elliptic.cpp
index c2bbe56f..cc657820 100644
--- a/test/concepts/sf_concept_check_elliptic.cpp
+++ b/test/concepts/sf_concept_check_elliptic.cpp
@@ -19,7 +19,7 @@
 #endif
 
 #include <boost/container_hash/hash.hpp>
-#include <libs/math/test/compile_test/poison.hpp>
+#include <compile_test/poison.hpp>
 
 #if !defined(TEST_MPF_50) && !defined(TEST_BACKEND) && !defined(TEST_MPZ) && !defined(TEST_CPP_DEC_FLOAT) && !defined(TEST_MPFR_50) && !defined(TEST_MPFR_6) && !defined(TEST_MPFR_15) && !defined(TEST_MPFR_17) && !defined(TEST_MPFR_30) && !defined(TEST_CPP_DEC_FLOAT_NO_ET) && !defined(TEST_LOGGED_ADAPTER) && !defined(TEST_CPP_BIN_FLOAT)
 #define TEST_MPF_50
diff --git a/test/concepts/sf_concept_check_gamma.cpp b/test/concepts/sf_concept_check_gamma.cpp
index 0a35398d..a4d86d0d 100644
--- a/test/concepts/sf_concept_check_gamma.cpp
+++ b/test/concepts/sf_concept_check_gamma.cpp
@@ -19,7 +19,7 @@
 #endif
 
 #include <boost/container_hash/hash.hpp>
-#include <libs/math/test/compile_test/poison.hpp>
+#include <compile_test/poison.hpp>
 
 #if !defined(TEST_MPF_50) && !defined(TEST_BACKEND) && !defined(TEST_MPZ) && !defined(TEST_CPP_DEC_FLOAT) && !defined(TEST_MPFR_50) && !defined(TEST_MPFR_6) && !defined(TEST_MPFR_15) && !defined(TEST_MPFR_17) && !defined(TEST_MPFR_30) && !defined(TEST_CPP_DEC_FLOAT_NO_ET) && !defined(TEST_LOGGED_ADAPTER) && !defined(TEST_CPP_BIN_FLOAT)
 #define TEST_MPF_50
diff --git a/test/concepts/sf_concept_check_poly.cpp b/test/concepts/sf_concept_check_poly.cpp
index f3033334..588a7f02 100644
--- a/test/concepts/sf_concept_check_poly.cpp
+++ b/test/concepts/sf_concept_check_poly.cpp
@@ -19,7 +19,7 @@
 #endif
 
 #include <boost/container_hash/hash.hpp>
-#include <libs/math/test/compile_test/poison.hpp>
+#include <compile_test/poison.hpp>
 
 #if !defined(TEST_MPF_50) && !defined(TEST_BACKEND) && !defined(TEST_MPZ) && !defined(TEST_CPP_DEC_FLOAT) && !defined(TEST_MPFR_50) && !defined(TEST_MPFR_6) && !defined(TEST_MPFR_15) && !defined(TEST_MPFR_17) && !defined(TEST_MPFR_30) && !defined(TEST_CPP_DEC_FLOAT_NO_ET) && !defined(TEST_LOGGED_ADAPTER) && !defined(TEST_CPP_BIN_FLOAT)
 #define TEST_MPF_50
diff --git a/test/math/high_prec/test_gamma.hpp b/test/math/high_prec/test_gamma.hpp
index 4eb1a39a..0c366f9e 100644
--- a/test/math/high_prec/test_gamma.hpp
+++ b/test/math/high_prec/test_gamma.hpp
@@ -14,9 +14,9 @@
 #include <boost/math/tools/test.hpp>
 #include <boost/math/constants/constants.hpp>
 #include <boost/array.hpp>
-#include "libs/math/test/functor.hpp"
+#include "functor.hpp"
 
-#include "libs/math/test/handle_test_result.hpp"
+#include "handle_test_result.hpp"
 #include "../table_type.hpp"
 
 #ifndef SC_
diff --git a/test/math/instances/Jamfile.v2 b/test/math/instances/Jamfile.v2
index 4c66a907..d91d7887 100644
--- a/test/math/instances/Jamfile.v2
+++ b/test/math/instances/Jamfile.v2
@@ -20,7 +20,6 @@ project : requirements
    <include>$(mpfi_path)
    <include>$(mpfi_path)/src
    <include>$(tommath_path)
-   <include>../../..
    # We set these to make it easier to set up and test GMP and MPFR under Win32:
    #<toolset>msvc:<runtime-link>static
    #<toolset>msvc:<link>static
@@ -36,10 +35,10 @@ project : requirements
    <define>BOOST_OPTIONAL_USE_OLD_DEFINITION_OF_NONE
    ;
 
-lib gmp : : <search>$(gmp_path) ;
-lib mpfr : : <search>$(gmp_path) <search>$(mpfr_path) <search>$(mpfr_path)/build.vc10/lib/Win32/Debug ;
-lib mpfi : : <search>$(gmp_path) <search>$(mpfr_path) <search>$(mpfr_path)/build.vc10/lib/Win32/Debug <search>$(mpfi_path) <search>$(mpfi_path)/src ;
-lib quadmath ;
+searched-lib gmp : : <search>$(gmp_path) ;
+searched-lib mpfr : : <search>$(gmp_path) <search>$(mpfr_path) <search>$(mpfr_path)/build.vc10/lib/Win32/Debug ;
+searched-lib mpfi : : <search>$(gmp_path) <search>$(mpfr_path) <search>$(mpfr_path)/build.vc10/lib/Win32/Debug <search>$(mpfi_path) <search>$(mpfi_path)/src ;
+searched-lib quadmath ;
 
 rule generate_objs ( suffix : variant_count : build_opts * )
 {
diff --git a/test/math/log1p_expm1_test.cpp b/test/math/log1p_expm1_test.cpp
index b2f1b19e..18aa6819 100644
--- a/test/math/log1p_expm1_test.cpp
+++ b/test/math/log1p_expm1_test.cpp
@@ -18,7 +18,7 @@
 
 #include "table_type.hpp"
 
-#include "libs/math/test/log1p_expm1_test.hpp"
+#include "log1p_expm1_test.hpp"
 
 //
 // DESCRIPTION:
diff --git a/test/math/powm1_sqrtp1m1_test.cpp b/test/math/powm1_sqrtp1m1_test.cpp
index f6832aeb..9e75e1ce 100644
--- a/test/math/powm1_sqrtp1m1_test.cpp
+++ b/test/math/powm1_sqrtp1m1_test.cpp
@@ -16,7 +16,7 @@
 
 #include "table_type.hpp"
 
-#include "libs/math/test/powm1_sqrtp1m1_test.hpp"
+#include "powm1_sqrtp1m1_test.hpp"
 
 //
 // DESCRIPTION:
diff --git a/test/math/table_type.hpp b/test/math/table_type.hpp
index 26229745..eb846ef8 100644
--- a/test/math/table_type.hpp
+++ b/test/math/table_type.hpp
@@ -6,7 +6,7 @@
 #ifndef BOOST_MP_TABLE_TYPE
 #define BOOST_MP_TABLE_TYPE
 
-#include <libs/math/test/table_type.hpp>
+#include <table_type.hpp>
 #include <boost/multiprecision/number.hpp>
 
 struct string_table_entry
diff --git a/test/math/test_bessel_i.cpp b/test/math/test_bessel_i.cpp
index 0d9176b8..58845a34 100644
--- a/test/math/test_bessel_i.cpp
+++ b/test/math/test_bessel_i.cpp
@@ -12,7 +12,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_bessel_i.hpp"
+#include "test_bessel_i.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_bessel_j.cpp b/test/math/test_bessel_j.cpp
index d322c371..50a65fd9 100644
--- a/test/math/test_bessel_j.cpp
+++ b/test/math/test_bessel_j.cpp
@@ -12,7 +12,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_bessel_j.hpp"
+#include "test_bessel_j.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_bessel_k.cpp b/test/math/test_bessel_k.cpp
index 6d883a1d..9411e428 100644
--- a/test/math/test_bessel_k.cpp
+++ b/test/math/test_bessel_k.cpp
@@ -12,7 +12,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_bessel_k.hpp"
+#include "test_bessel_k.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_bessel_y.cpp b/test/math/test_bessel_y.cpp
index 6734651f..4d61415a 100644
--- a/test/math/test_bessel_y.cpp
+++ b/test/math/test_bessel_y.cpp
@@ -12,7 +12,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_bessel_y.hpp"
+#include "test_bessel_y.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_beta.cpp b/test/math/test_beta.cpp
index 57497a29..ba7f09de 100644
--- a/test/math/test_beta.cpp
+++ b/test/math/test_beta.cpp
@@ -12,7 +12,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_beta.hpp"
+#include "test_beta.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_binomial_coeff.cpp b/test/math/test_binomial_coeff.cpp
index 6d322d7e..6d5a6f33 100644
--- a/test/math/test_binomial_coeff.cpp
+++ b/test/math/test_binomial_coeff.cpp
@@ -12,7 +12,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_binomial_coeff.hpp"
+#include "test_binomial_coeff.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_carlson_1.cpp b/test/math/test_carlson_1.cpp
index ef5c3780..178d3d7a 100644
--- a/test/math/test_carlson_1.cpp
+++ b/test/math/test_carlson_1.cpp
@@ -10,7 +10,7 @@
 
 #include <boost/math/special_functions/math_fwd.hpp>
 #include <boost/math/special_functions/ellint_rf.hpp>
-#include "libs/math/test/test_carlson.hpp"
+#include "test_carlson.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_carlson_2.cpp b/test/math/test_carlson_2.cpp
index 302f92cf..6b9a1b21 100644
--- a/test/math/test_carlson_2.cpp
+++ b/test/math/test_carlson_2.cpp
@@ -9,7 +9,7 @@
 #define TEST2
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_carlson.hpp"
+#include "test_carlson.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_carlson_3.cpp b/test/math/test_carlson_3.cpp
index 89d14f82..cbfcdb04 100644
--- a/test/math/test_carlson_3.cpp
+++ b/test/math/test_carlson_3.cpp
@@ -9,7 +9,7 @@
 #define TEST3
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_carlson.hpp"
+#include "test_carlson.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_carlson_4.cpp b/test/math/test_carlson_4.cpp
index 40457e75..0e168d41 100644
--- a/test/math/test_carlson_4.cpp
+++ b/test/math/test_carlson_4.cpp
@@ -9,7 +9,7 @@
 #define TEST4
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_carlson.hpp"
+#include "test_carlson.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_cbrt.cpp b/test/math/test_cbrt.cpp
index 62850871..5bc2e47e 100644
--- a/test/math/test_cbrt.cpp
+++ b/test/math/test_cbrt.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_cbrt.hpp"
+#include "test_cbrt.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_digamma.cpp b/test/math/test_digamma.cpp
index 3ac7b283..95c82c14 100644
--- a/test/math/test_digamma.cpp
+++ b/test/math/test_digamma.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_digamma.hpp"
+#include "test_digamma.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_ellint_1.cpp b/test/math/test_ellint_1.cpp
index 5f997d4b..7dd54af2 100644
--- a/test/math/test_ellint_1.cpp
+++ b/test/math/test_ellint_1.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_ellint_1.hpp"
+#include "test_ellint_1.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_ellint_2.cpp b/test/math/test_ellint_2.cpp
index 38c5a2c9..96504e68 100644
--- a/test/math/test_ellint_2.cpp
+++ b/test/math/test_ellint_2.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_ellint_2.hpp"
+#include "test_ellint_2.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_ellint_3.cpp b/test/math/test_ellint_3.cpp
index 7c964c4c..020bc9aa 100644
--- a/test/math/test_ellint_3.cpp
+++ b/test/math/test_ellint_3.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_ellint_3.hpp"
+#include "test_ellint_3.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_erf.cpp b/test/math/test_erf.cpp
index 419a3783..57184134 100644
--- a/test/math/test_erf.cpp
+++ b/test/math/test_erf.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_erf.hpp"
+#include "test_erf.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_expint.cpp b/test/math/test_expint.cpp
index 062dc675..27f620c9 100644
--- a/test/math/test_expint.cpp
+++ b/test/math/test_expint.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_expint.hpp"
+#include "test_expint.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_gamma.cpp b/test/math/test_gamma.cpp
index 473efd03..e55ca9d2 100644
--- a/test/math/test_gamma.cpp
+++ b/test/math/test_gamma.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_gamma.hpp"
+#include "test_gamma.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_hermite.cpp b/test/math/test_hermite.cpp
index 361da399..951c05af 100644
--- a/test/math/test_hermite.cpp
+++ b/test/math/test_hermite.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_hermite.hpp"
+#include "test_hermite.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_ibeta.cpp b/test/math/test_ibeta.cpp
index 7ac0338f..7258bbf0 100644
--- a/test/math/test_ibeta.cpp
+++ b/test/math/test_ibeta.cpp
@@ -10,7 +10,7 @@
 #define TEST_DATA 1
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_ibeta.hpp"
+#include "test_ibeta.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_ibeta_2.cpp b/test/math/test_ibeta_2.cpp
index 4e6bdafb..09f184f4 100644
--- a/test/math/test_ibeta_2.cpp
+++ b/test/math/test_ibeta_2.cpp
@@ -10,7 +10,7 @@
 #define TEST_DATA 2
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_ibeta.hpp"
+#include "test_ibeta.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_ibeta_3.cpp b/test/math/test_ibeta_3.cpp
index 57d15c2e..f79404b2 100644
--- a/test/math/test_ibeta_3.cpp
+++ b/test/math/test_ibeta_3.cpp
@@ -10,7 +10,7 @@
 #define TEST_DATA 3
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_ibeta.hpp"
+#include "test_ibeta.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_ibeta_4.cpp b/test/math/test_ibeta_4.cpp
index a2818bf7..bc5e85bf 100644
--- a/test/math/test_ibeta_4.cpp
+++ b/test/math/test_ibeta_4.cpp
@@ -10,7 +10,7 @@
 #define TEST_DATA 4
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_ibeta.hpp"
+#include "test_ibeta.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_ibeta_inv_1.cpp b/test/math/test_ibeta_inv_1.cpp
index 603f303b..adfbcf3a 100644
--- a/test/math/test_ibeta_inv_1.cpp
+++ b/test/math/test_ibeta_inv_1.cpp
@@ -10,7 +10,7 @@
 #define TEST_DATA 4
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_ibeta_inv.hpp"
+#include "test_ibeta_inv.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_ibeta_inv_ab_4.cpp b/test/math/test_ibeta_inv_ab_4.cpp
index f49c85c5..6f849b7e 100644
--- a/test/math/test_ibeta_inv_ab_4.cpp
+++ b/test/math/test_ibeta_inv_ab_4.cpp
@@ -11,7 +11,7 @@
 #define FULL_TEST
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_ibeta_inv_ab.hpp"
+#include "test_ibeta_inv_ab.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_igamma.cpp b/test/math/test_igamma.cpp
index 562d3372..486bab8c 100644
--- a/test/math/test_igamma.cpp
+++ b/test/math/test_igamma.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_igamma.hpp"
+#include "test_igamma.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_igamma_inv.cpp b/test/math/test_igamma_inv.cpp
index 2ac7ee0e..d1b1b4dc 100644
--- a/test/math/test_igamma_inv.cpp
+++ b/test/math/test_igamma_inv.cpp
@@ -12,7 +12,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_igamma_inv.hpp"
+#include "test_igamma_inv.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_igamma_inva.cpp b/test/math/test_igamma_inva.cpp
index 7b6db27d..9556c367 100644
--- a/test/math/test_igamma_inva.cpp
+++ b/test/math/test_igamma_inva.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_igamma_inva.hpp"
+#include "test_igamma_inva.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_laguerre.cpp b/test/math/test_laguerre.cpp
index 7bf6ea7a..a5321039 100644
--- a/test/math/test_laguerre.cpp
+++ b/test/math/test_laguerre.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_laguerre.hpp"
+#include "test_laguerre.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_legendre.cpp b/test/math/test_legendre.cpp
index 351f947c..c3aef80e 100644
--- a/test/math/test_legendre.cpp
+++ b/test/math/test_legendre.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_legendre.hpp"
+#include "test_legendre.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_tgamma_ratio.cpp b/test/math/test_tgamma_ratio.cpp
index 3295f663..0364f24e 100644
--- a/test/math/test_tgamma_ratio.cpp
+++ b/test/math/test_tgamma_ratio.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_tgamma_ratio.hpp"
+#include "test_tgamma_ratio.hpp"
 
 void expected_results()
 {
diff --git a/test/math/test_zeta.cpp b/test/math/test_zeta.cpp
index cc42bbb3..2279ac96 100644
--- a/test/math/test_zeta.cpp
+++ b/test/math/test_zeta.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/math_fwd.hpp>
-#include "libs/math/test/test_zeta.hpp"
+#include "test_zeta.hpp"
 
 void expected_results()
 {
diff --git a/test/test_arithmetic_complex128.cpp b/test/test_arithmetic_complex128.cpp
index 9bef30cd..868d7255 100644
--- a/test/test_arithmetic_complex128.cpp
+++ b/test/test_arithmetic_complex128.cpp
@@ -8,7 +8,7 @@
 #include <boost/multiprecision/complex128.hpp>
 #endif
 
-#include "libs/multiprecision/test/test_arithmetic.hpp"
+#include "test_arithmetic.hpp"
 
 int main()
 {
diff --git a/test/test_arithmetic_complex_adaptor.cpp b/test/test_arithmetic_complex_adaptor.cpp
index 5bd37d9a..7c5a34de 100644
--- a/test/test_arithmetic_complex_adaptor.cpp
+++ b/test/test_arithmetic_complex_adaptor.cpp
@@ -7,7 +7,7 @@
 
 #include <boost/multiprecision/cpp_complex.hpp>
 
-#include "libs/multiprecision/test/test_arithmetic.hpp"
+#include "test_arithmetic.hpp"
 
 int main()
 {
diff --git a/test/test_arithmetic_complex_adaptor_2.cpp b/test/test_arithmetic_complex_adaptor_2.cpp
index 469230d5..14a6ca77 100644
--- a/test/test_arithmetic_complex_adaptor_2.cpp
+++ b/test/test_arithmetic_complex_adaptor_2.cpp
@@ -7,7 +7,7 @@
 
 #include <boost/multiprecision/cpp_complex.hpp>
 
-#include "libs/multiprecision/test/test_arithmetic.hpp"
+#include "test_arithmetic.hpp"
 
 int main()
 {
diff --git a/test/test_arithmetic_cpp_bin_float_1.cpp b/test/test_arithmetic_cpp_bin_float_1.cpp
index 7fa2553a..37e06a91 100644
--- a/test/test_arithmetic_cpp_bin_float_1.cpp
+++ b/test/test_arithmetic_cpp_bin_float_1.cpp
@@ -5,7 +5,7 @@
 
 #include <boost/multiprecision/cpp_bin_float.hpp>
 
-#include "libs/multiprecision/test/test_arithmetic.hpp"
+#include "test_arithmetic.hpp"
 
 template <unsigned Digits, boost::multiprecision::backends::digit_base_type DigitBase, class Allocator, class Exponent, Exponent MinExponent, Exponent MaxExponent, boost::multiprecision::expression_template_option ET>
 struct related_type<boost::multiprecision::number<boost::multiprecision::cpp_bin_float<Digits, DigitBase, Allocator, Exponent, MinExponent, MaxExponent>, ET> >
diff --git a/test/test_arithmetic_cpp_bin_float_2.cpp b/test/test_arithmetic_cpp_bin_float_2.cpp
index 931d45e6..07ca83f9 100644
--- a/test/test_arithmetic_cpp_bin_float_2.cpp
+++ b/test/test_arithmetic_cpp_bin_float_2.cpp
@@ -7,7 +7,7 @@
 
 #include <boost/multiprecision/cpp_bin_float.hpp>
 
-#include "libs/multiprecision/test/test_arithmetic.hpp"
+#include "test_arithmetic.hpp"
 
 template <unsigned Digits, boost::multiprecision::backends::digit_base_type DigitBase, class Allocator, class Exponent, Exponent MinExponent, Exponent MaxExponent, boost::multiprecision::expression_template_option ET>
 struct related_type<boost::multiprecision::number<boost::multiprecision::cpp_bin_float<Digits, DigitBase, Allocator, Exponent, MinExponent, MaxExponent>, ET> >
diff --git a/test/test_arithmetic_cpp_bin_float_2m.cpp b/test/test_arithmetic_cpp_bin_float_2m.cpp
index 366c3af5..42f2fb0a 100644
--- a/test/test_arithmetic_cpp_bin_float_2m.cpp
+++ b/test/test_arithmetic_cpp_bin_float_2m.cpp
@@ -7,7 +7,7 @@
 
 #include <boost/multiprecision/cpp_bin_float.hpp>
 
-#include "libs/multiprecision/test/test_arithmetic.hpp"
+#include "test_arithmetic.hpp"
 
 #ifndef _WIN64 // object file too large
 template <unsigned Digits, boost::multiprecision::backends::digit_base_type DigitBase, class Allocator, class Exponent, Exponent MinExponent, Exponent MaxExponent, boost::multiprecision::expression_template_option ET>
diff --git a/test/test_arithmetic_cpp_bin_float_3.cpp b/test/test_arithmetic_cpp_bin_float_3.cpp
index 2e4b97d9..3741c179 100644
--- a/test/test_arithmetic_cpp_bin_float_3.cpp
+++ b/test/test_arithmetic_cpp_bin_float_3.cpp
@@ -5,7 +5,7 @@
 
 #include <boost/multiprecision/cpp_bin_float.hpp>
 
-#include "libs/multiprecision/test/test_arithmetic.hpp"
+#include "test_arithmetic.hpp"
 
 template <unsigned Digits, boost::multiprecision::backends::digit_base_type DigitBase, class Allocator, class Exponent, Exponent MinExponent, Exponent MaxExponent, boost::multiprecision::expression_template_option ET>
 struct related_type<boost::multiprecision::number<boost::multiprecision::cpp_bin_float<Digits, DigitBase, Allocator, Exponent, MinExponent, MaxExponent>, ET> >
diff --git a/test/test_arithmetic_cpp_bin_float_4.cpp b/test/test_arithmetic_cpp_bin_float_4.cpp
index 268e631c..e5d7ec6a 100644
--- a/test/test_arithmetic_cpp_bin_float_4.cpp
+++ b/test/test_arithmetic_cpp_bin_float_4.cpp
@@ -12,7 +12,7 @@
 
 #include <boost/multiprecision/cpp_bin_float.hpp>
 
-#include "libs/multiprecision/test/test_arithmetic.hpp"
+#include "test_arithmetic.hpp"
 
 using namespace boost::multiprecision;
 
diff --git a/test/test_arithmetic_cpp_bin_float_5.cpp b/test/test_arithmetic_cpp_bin_float_5.cpp
index b6dbd9d2..f84ab0ba 100644
--- a/test/test_arithmetic_cpp_bin_float_5.cpp
+++ b/test/test_arithmetic_cpp_bin_float_5.cpp
@@ -5,7 +5,7 @@
 
 #include <boost/multiprecision/cpp_bin_float.hpp>
 
-#include "libs/multiprecision/test/test_arithmetic.hpp"
+#include "test_arithmetic.hpp"
 
 using namespace boost::multiprecision;
 
diff --git a/test/test_arithmetic_mpc.cpp b/test/test_arithmetic_mpc.cpp
index 4bb82477..8967b3c4 100644
--- a/test/test_arithmetic_mpc.cpp
+++ b/test/test_arithmetic_mpc.cpp
@@ -6,7 +6,7 @@
 #include <boost/multiprecision/mpc.hpp>
 #define TEST_MPC
 
-#include "libs/multiprecision/test/test_arithmetic.hpp"
+#include "test_arithmetic.hpp"
 
 template <unsigned D>
 struct related_type<boost::multiprecision::number<boost::multiprecision::mpc_complex_backend<D> > >
diff --git a/test/test_cpp_bin_float.cpp b/test/test_cpp_bin_float.cpp
index 132341a5..f37500d9 100644
--- a/test/test_cpp_bin_float.cpp
+++ b/test/test_cpp_bin_float.cpp
@@ -15,7 +15,7 @@
 #endif
 #include <boost/random/mersenne_twister.hpp>
 #include <boost/random/uniform_int.hpp>
-#include "libs/multiprecision/test/test.hpp"
+#include "test.hpp"
 #include <iostream>
 #include <iomanip>
 
diff --git a/test/test_cpp_bin_float_io.cpp b/test/test_cpp_bin_float_io.cpp
index 992a9e51..021f78bc 100644
--- a/test/test_cpp_bin_float_io.cpp
+++ b/test/test_cpp_bin_float_io.cpp
@@ -68,7 +68,7 @@ void test()
          std::ios_base::fixed | std::ios_base::showpos}};
 
    boost::array<boost::array<const char*, 13 * 9>, 40> string_data = {{
-#include "libs/multiprecision/test/string_data.ipp"
+#include "string_data.ipp"
    }};
 
    double num   = 123456789.0;
diff --git a/test/test_float_io.cpp b/test/test_float_io.cpp
index b6c108c1..12ca0c55 100644
--- a/test/test_float_io.cpp
+++ b/test/test_float_io.cpp
@@ -113,7 +113,7 @@ void test()
          std::ios_base::fixed | std::ios_base::showpos}};
 
    boost::array<boost::array<const char*, 13 * 9>, 40> string_data = {{
-#include "libs/multiprecision/test/string_data.ipp"
+#include "string_data.ipp"
    }};
 
    double num   = 123456789.0;
