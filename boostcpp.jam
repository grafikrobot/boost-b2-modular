# Boost.Build support specific for the Boost C++ Libraries.
# Copyright Vladimir Prus 2002-2010.
# Copyright Dave Abrahams 2005-2006.
# Copyright Rene Rivera 2005-2023.
# Copyright Douglas Gregor 2005.
#
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)

import common ;
import modules ;
import option ;
import os ;

##############################################################################
#
# 0. General setup. Parse options, check them.
#
##############################################################################

# What kind of layout are we doing?
layout = [ option.get layout : "" ] ;
layout = [ MATCH (versioned|tagged|system)(-(.+))? : $(layout) ] ;
if $(layout[3])
{
    layout-version = $(layout[3]) ;
    layout = $(layout[1]) ;
    if [ version-less [ regex.split $(layout-version) "[.]" ] : 1 66 ]
    {
        layout-version = 1.40 ;
    }
    else if [ version-less [ regex.split $(layout-version) "[.]" ] : 1 69 ]
    {
        layout-version = 1.66 ;
    }
}
layout-version ?= 1.69 ;

# On Windows, we use versioned layout by default in order to be compatible with
# autolink. On other systems, we use system layout which is what every other
# program uses. Note that the Windows check is static, and will not be affected
# by specific build properties used.
# TODO: Fix to make this choice based on <target-os>.
if ! $(layout)
{
    if [ os.name ] = NT
    {
        layout = versioned ;
    }
    else
    {
        layout = system ;
    }
}
layout-$(layout) = true ;

if $(layout) = system && $(build-type) = complete
{
    ECHO error\: Cannot use --layout=system with --build-type complete. ;
    ECHO error\: Please use either --layout=versioned or --layout=tagged ;
    ECHO error\: if you wish to build multiple variants. ;
    if [ os.name ] != NT
    {
        ECHO error\: Note that --layout=system is used by default on Unix
            starting with Boost 1.40. ;
    }
    EXIT ;
}

# Custom build ID.
build-id = [ option.get buildid ] ;
if $(build-id)
{
    BUILD_ID = [ regex.replace $(build-id) "[*\\/:.\"\' ]" _ ] ;
}

# Python build id (for Python libraries only).
python-id = [ option.get "python-buildid" ] ;
if $(python-id)
{
    PYTHON_ID = [ regex.replace $(python-id) "[*\\/:.\"\']" _ ] ;
}


if $(layout) = versioned
{
    switch $(layout-version)
    {
    case 1.40 :
        .format-name-args =
            <base> <toolset> <threading> <runtime> ;
    case 1.66 :
        .format-name-args =
            <base> <toolset> <threading> <runtime> <arch-and-model> ;
    case 1.69 :
        .format-name-args =
            <base> <toolset> <threading> <runtime> <arch-and-model> ;
    }
}
else if $(layout) = tagged
{
    switch $(layout-version)
    {
    case 1.40 :
        .format-name-args =
            <base> <threading> <runtime> ;
    case 1.66 :
        .format-name-args =
            <base> <threading> <runtime> ;
    case 1.69 :
        .format-name-args =
            <base> <threading> <runtime> <arch-and-model> ;
    }
}
else if $(layout) = system
{
    .format-name-args = <base> ;
}
else
{
    .format-name-error = true ;
}

################################################################################
#
# 1. 'tag' function adding decorations suitable to the properties if versioned
# or tagged layout is requested. Called from Jamroot.
#
################################################################################

rule tag ( name : type ? : property-set )
{
    if $(type) in STATIC_LIB SHARED_LIB IMPORT_LIB
    {
        local boost-version = [ modules.peek [ CALLER_MODULE ] : BOOST_VERSION ] ;
        local boost-version-tag =
            [ MATCH "^([^.]+)[.]([^.]+)[.]([^.]+)" : $(boost-version) ] ;
        if $(boost-version-tag[3]) = 0
        {
            boost-version-tag = $(boost-version-tag[1-2]) ;
        }
        boost-version-tag = $(boost-version-tag:J=_) ;

        local args = $(.format-name-args) ;
        if $(layout) = versioned
        {
            args += -$(boost-version-tag) ;
        }
        local result  = [ common.format-name
            $(args) -$(BUILD_ID)
            : $(name) : $(type) : $(property-set) ] ;
        if $(.format-name-error)
        {
            EXIT error\: invalid layout '$(layout:E=)' ;
        }

        # Optionally add version suffix. On NT, library with version suffix will
        # not be recognized by linkers. On CYGWIN, we get strage duplicate
        # symbol errors when library is generated with version suffix. On OSX,
        # version suffix is not needed -- the linker expects the
        # libFoo.1.2.3.dylib format. AIX linkers do not accept version suffixes
        # either. Pgi compilers can not accept a library with version suffix.
        # For android, if we link to libFoo.so, which is a soft link to libFoo.so.1.2.3,
        # the android studio will only pack the former into the final apk.
        if $(type) = SHARED_LIB &&
          ! [ $(property-set).get <target-os> ] in windows cygwin darwin aix android &&
          ! [ $(property-set).get <toolset> ] in pgi
        {
            result = $(result).$(boost-version)  ;
        }

        return $(result) ;
    }
}
