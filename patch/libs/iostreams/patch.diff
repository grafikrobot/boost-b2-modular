diff --git a/Jamfile b/Jamfile
deleted file mode 100644
index afe2fcf..0000000
--- a/Jamfile
+++ /dev/null
@@ -1,11 +0,0 @@
-#  Boost.Iostreams Library Jamfile
-#
-#  Copyright (c) 2018 James E. King III
-#
-#  Use, modification, and distribution are subject to the
-#  Boost Software License, Version 1.0. (See accompanying file
-#  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-
-# please order by name to ease maintenance
-build-project example ;
-build-project test ;
diff --git a/build/Jamfile.v2 b/build/Jamfile.v2
index 7ea8a96..7566bd9 100644
--- a/build/Jamfile.v2
+++ b/build/Jamfile.v2
@@ -7,7 +7,7 @@
 
 # See http://www.boost.org/libs/iostreams for documentation.
 
-project /boost/iostreams : source-location ../src ;
+project : source-location ../src ;
 
 # The biggest trick in this Jamfile is to link to zlib and bzip2 when
 # needed. To configure that, a number of variables are used, which must
@@ -23,8 +23,6 @@ import path ;
 import ac ;
 local debug = [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ] ;
 
-local libraries-to-install = boost_iostreams ;
-
 for local v in NO_COMPRESSION 
                NO_ZLIB
                NO_BZIP2
@@ -125,5 +123,3 @@ lib boost_iostreams
     :
     : <link>shared:<define>BOOST_IOSTREAMS_DYN_LINK=1
     ;
-
-boost-install $(libraries-to-install) ;
diff --git a/example/Jamfile.v2 b/example/Jamfile.v2
index 43fd088..5cbf492 100644
--- a/example/Jamfile.v2
+++ b/example/Jamfile.v2
@@ -12,6 +12,7 @@ project
         <library>/boost/iostreams//boost_iostreams
         <define>BOOST_ALL_NO_LIB=1
       # <toolset>msvc:<define>_SCL_SECURE_NO_WARNINGS
+        <include>.
     ;
 
 test-suite "iostreams-examples"
diff --git a/example/container_device_example.cpp b/example/container_device_example.cpp
index 4487e2f..fae878e 100644
--- a/example/container_device_example.cpp
+++ b/example/container_device_example.cpp
@@ -9,7 +9,7 @@
 #include <string>
 #include <boost/iostreams/stream.hpp>
 #include <boost/iostreams/detail/ios.hpp> // ios_base::beg.
-#include <libs/iostreams/example/container_device.hpp>
+#include <container_device.hpp>
 
 namespace io = boost::iostreams;
 namespace ex = boost::iostreams::example;
diff --git a/example/container_sink_example.cpp b/example/container_sink_example.cpp
index fdbd8fb..96413c1 100644
--- a/example/container_sink_example.cpp
+++ b/example/container_sink_example.cpp
@@ -8,7 +8,7 @@
 #include <cassert>
 #include <string>
 #include <boost/iostreams/stream.hpp>
-#include <libs/iostreams/example/container_device.hpp>
+#include <container_device.hpp>
 
 namespace io = boost::iostreams;
 namespace ex = boost::iostreams::example;
diff --git a/example/container_source_example.cpp b/example/container_source_example.cpp
index e8aff8b..27e322a 100644
--- a/example/container_source_example.cpp
+++ b/example/container_source_example.cpp
@@ -8,7 +8,7 @@
 #include <cassert>
 #include <string>
 #include <boost/iostreams/stream.hpp>
-#include <libs/iostreams/example/container_device.hpp>
+#include <container_device.hpp>
 
 namespace io = boost::iostreams;
 namespace ex = boost::iostreams::example;
diff --git a/test/Jamfile.v2 b/test/Jamfile.v2
index e13ff8f..8cf506f 100644
--- a/test/Jamfile.v2
+++ b/test/Jamfile.v2
@@ -59,12 +59,16 @@ rule compile-fail-iostreams ( sources * : requirements * : target-name ? ) {
           [ test-iostreams array_test.cpp ]
           [ test-iostreams auto_close_test.cpp ]
           [ test-iostreams buffer_size_test.cpp ]
-          [ test-iostreams close_test.cpp ]
+          [ test-iostreams close_test.cpp
+                /boost/lexical_cast//boost_lexical_cast ]
           [ test-iostreams 
                 code_converter_test.cpp    
-                detail/utf8_codecvt_facet.cpp ]
-          [ test-iostreams combine_test.cpp ]
-          [ test-iostreams compose_test.cpp ]
+                detail/utf8_codecvt_facet.cpp
+                /boost/lexical_cast//boost_lexical_cast ]
+          [ test-iostreams combine_test.cpp
+                /boost/lexical_cast//boost_lexical_cast ]
+          [ test-iostreams compose_test.cpp
+                /boost/lexical_cast//boost_lexical_cast ]
           [ test-iostreams component_access_test.cpp ]
           [ test-iostreams copy_test.cpp ]
           [ test-iostreams counter_test.cpp ]
@@ -87,30 +91,36 @@ rule compile-fail-iostreams ( sources * : requirements * : target-name ? ) {
           [ test-iostreams 
                 grep_test.cpp     
                 /boost/regex//boost_regex ]
-          [ test-iostreams invert_test.cpp ]
+          [ test-iostreams invert_test.cpp
+                /boost/lexical_cast//boost_lexical_cast ]
           [ test-iostreams line_filter_test.cpp ]
           [ test-iostreams mapped_file_test.cpp 
                 ../build//boost_iostreams ]
           [ test-iostreams path_test.cpp ]
           [ test-iostreams newline_test.cpp ]
           [ test-iostreams null_test.cpp ]
-          [ test-iostreams operation_sequence_test.cpp ]
+          [ test-iostreams operation_sequence_test.cpp
+                /boost/lexical_cast//boost_lexical_cast ]
           [ test-iostreams pipeline_test.cpp ]
           [ test-iostreams read_nonblocking_test.cpp ]
           [ test-iostreams 
                 regex_filter_test.cpp     
                 /boost/regex//boost_regex ]
-          [ test-iostreams restrict_test.cpp ]
+          [ test-iostreams restrict_test.cpp
+                /boost/lexical_cast//boost_lexical_cast ]
           [ test-iostreams seekable_file_test.cpp ]
           [ test-iostreams seekable_filter_test.cpp ]
           [ test-iostreams sequence_test.cpp ]
-          [ test-iostreams slice_test.cpp ]
+          [ test-iostreams slice_test.cpp
+                /boost/lexical_cast//boost_lexical_cast ]
           [ test-iostreams stdio_filter_test.cpp ]
           [ test-iostreams stream_offset_32bit_test.cpp ]
           [ test-iostreams stream_offset_64bit_test.cpp ]
           [ test-iostreams stream_state_test.cpp ]
-          [ test-iostreams symmetric_filter_test.cpp ]
-          [ test-iostreams tee_test.cpp ]
+          [ test-iostreams symmetric_filter_test.cpp
+                /boost/lexical_cast//boost_lexical_cast ]
+          [ test-iostreams tee_test.cpp
+                /boost/lexical_cast//boost_lexical_cast ]
           [ test-iostreams wide_stream_test.cpp ]
           [ test-iostreams windows_pipe_test.cpp
                ../build//boost_iostreams
