diff --git a/example/Jamfile.v2 b/example/Jamfile.v2
index b918205..507e727 100644
--- a/example/Jamfile.v2
+++ b/example/Jamfile.v2
@@ -8,18 +8,21 @@
 # http://www.boost.org/LICENSE_1_0.txt
 
 import testing ;
-import path ;
 
-project boost/units/example :
-  : requirements <include>$(BOOST_ROOT) <include>../../.. <warnings>all
+project :
+  : requirements <warnings>all
+    <library>/boost/math//boost_math
+    <library>/boost/lambda//boost_lambda
 ;
 
-files = [ path.glob . : *.cpp : performance.* runtime_unit.* ] ;
+files = [ glob *.cpp : performance.* runtime_unit.* ] ;
 
 for local file in $(files)
 {
     run $(file) ;
 }
 
-compile performance.cpp ;
-run runtime_unit.cpp : <runtime_unit_input.txt ;
+path-constant HERE : . ;
+
+compile performance.cpp /boost/timer//boost_timer /boost/ublas//boost_ublas ;
+run runtime_unit.cpp : <$(HERE)/runtime_unit_input.txt ;
diff --git a/test/Jamfile.v2 b/test/Jamfile.v2
index 47341da..78a461f 100644
--- a/test/Jamfile.v2
+++ b/test/Jamfile.v2
@@ -14,9 +14,8 @@ warning-compilers =
     <toolset>msvc
 ;
 
-project boost/units/test :
+project :
     requirements
-        <implicit-dependency>/boost//headers
         <toolset>msvc:<asynch-exceptions>on
         $(warning-compilers)\:$(warning-options)
         # This warning comes from the test library.
@@ -43,16 +42,16 @@ run test_conversion.cpp ;
 run test_base_dimension.cpp ;
 run test_absolute.cpp ;
 run test_default_conversion.cpp ;
-run test_cmath.cpp ;
-run test_limits.cpp ;
+run test_cmath.cpp /boost/math//boost_math ;
+run test_limits.cpp /boost/math//boost_math ;
 run test_custom_unit.cpp ;
 run test_scaled_conversion.cpp ;
-run test_lambda.cpp ;
-run test_sqrt_scaled_unit.cpp ;
+run test_lambda.cpp /boost/lambda//boost_lambda ;
+run test_sqrt_scaled_unit.cpp /boost/math//boost_math ;
 run test_scaled_unit.cpp ;
-run test_output.cpp /boost//regex/<warnings-as-errors>off : : : <test-info>always_show_run_output ;
-run test_trig.cpp ;
-run test_information_units.cpp ;
+run test_output.cpp /boost/regex//boost_regex/<warnings-as-errors>off : : : <test-info>always_show_run_output ;
+run test_trig.cpp /boost/math//boost_math ;
+run test_information_units.cpp /boost/multiprecision//boost_multiprecision ;
 
 compile-fail fail_implicit_conversion.cpp ;
 compile-fail fail_quantity_construct.cpp ;
diff --git a/test_headers/Jamfile.v2 b/test_headers/Jamfile.v2
index 8bcd832..a7ee1f0 100644
--- a/test_headers/Jamfile.v2
+++ b/test_headers/Jamfile.v2
@@ -14,11 +14,10 @@ import print ;
 import sequence ;
 import feature ;
 
-project boost/units/test_headers :
-    requirements <include>$(BOOST_ROOT) <include>../../..
+project :
 ;
 
-headers = [ path.glob-tree ../../../boost/units : *.hpp : detail ] ;
+headers = [ path.glob-tree ../include/boost/units : *.hpp : detail ] ;
 
 for local file in $(headers)
 {
@@ -27,7 +26,7 @@ for local file in $(headers)
         <define>BOOST_UNITS_HEADER_NAME=$(file)
         <dependency>$(file)
       : # test name
-        [ regex.replace [ path.relative-to ../../.. $(file) ] "/" "_" ] ;
+        [ regex.replace [ path.relative-to ../include $(file) ] "/" "_" ] ;
 }
 
 feature.feature <generate-include-all-order> : forward reverse : incidental ;
@@ -43,8 +42,11 @@ rule generate-include-all ( target : sources * : properties * )
 
     for local file in $(sources)
     {
-        print.text "#include <$(file:G=)>
+        if $(sources:S) = ".hpp"
+        {
+            print.text "#include <$(file:G=)>
 " : overwrite ;
+        }
     }
 
 }
