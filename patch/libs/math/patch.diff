diff --git a/build/Jamfile.v2 b/build/Jamfile.v2
index fd840287e..a360f4bc9 100644
--- a/build/Jamfile.v2
+++ b/build/Jamfile.v2
@@ -5,7 +5,7 @@
 
 import testing ;
 import pch ;
-import ../../config/checks/config : requires ;
+import config : requires ;
 
 project  
     : requirements 
@@ -121,5 +121,3 @@ lib boost_math_c99l : ../src/tr1/$(C99_SOURCES)l.cpp pch
          <include>../src/tr1
          [ check-target-builds ../config//has_long_double_support "long double support" : : <build>no ]
    ;
-
-boost-install boost_math_c99 boost_math_c99f boost_math_c99l boost_math_tr1 boost_math_tr1f boost_math_tr1l ;
diff --git a/config/Jamfile.v2 b/config/Jamfile.v2
index 77aca7c2e..650e88880 100644
--- a/config/Jamfile.v2
+++ b/config/Jamfile.v2
@@ -9,11 +9,11 @@ import path ;
 local ntl-path = [ modules.peek : NTL_PATH ] ;
 local gmp_path = [ modules.peek : GMP_PATH ] ;
 
-lib quadmath ;
-lib fftw3 ;
-lib fftw3f ;
-lib fftw3l ;
-lib fftw3q ;
+searched-lib quadmath ;
+searched-lib fftw3 ;
+searched-lib fftw3f ;
+searched-lib fftw3l ;
+searched-lib fftw3q ;
 
 obj has_long_double_support : has_long_double_support.cpp ;
 obj has_mpfr_class : has_mpfr_class.cpp :
diff --git a/example/Jamfile.v2 b/example/Jamfile.v2
index 34e4a5a8c..761c8acc8 100644
--- a/example/Jamfile.v2
+++ b/example/Jamfile.v2
@@ -7,10 +7,11 @@
 
 # bring in the rules for testing
 import testing ;
-import ../../config/checks/config : requires ;
+import config : requires ;
 
 project
     : requirements
+      <library>/boost/multiprecision//boost_multiprecision
       <toolset>gcc:<cxxflags>-Wno-missing-braces
       <toolset>darwin:<cxxflags>-Wno-missing-braces
       <toolset>acc:<cxxflags>+W2068,2461,2236,4070
@@ -36,7 +37,6 @@ project
       <toolset>clang:<cxxflags>-Wno-unknown-pragmas
       <toolset>clang:<cxxflags>-Wno-language-extension-token
 
-      <include>../../..
       <include>../include_private
       <exception-handling>off:<source>../test//no_eh
       [ requires cxx11_noexcept cxx11_rvalue_references sfinae_expr cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_tuple cxx11_hdr_initializer_list cxx11_hdr_chrono cxx11_thread_local cxx11_constexpr cxx11_nullptr cxx11_numeric_limits cxx11_decltype cxx11_hdr_array cxx11_hdr_atomic cxx11_hdr_type_traits cxx11_allocator cxx11_explicit_conversion_operators ]
@@ -53,7 +53,7 @@ test-suite examples :
    [ run binomial_example_nag.cpp  ]
    [ run binomial_quiz_example.cpp : : : <exception-handling>off:<build>no  ]
    [ run binomial_sample_sizes.cpp  ]
-   [ run brent_minimise_example.cpp  : : : [ requires cxx11_hdr_tuple ] ]
+   [ run brent_minimise_example.cpp /boost/test//boost_test : : : [ requires cxx11_hdr_tuple ] ]
 
    [ run c_error_policy_example.cpp  ]
    [ run chi_square_std_dev_test.cpp : : : <exception-handling>off:<build>no  ]
@@ -113,7 +113,7 @@ test-suite examples :
    [ run policy_eg_6.cpp  ]
    [ run policy_eg_7.cpp  ]
    [ run policy_eg_8.cpp  ]
-   [ run policy_eg_9.cpp  ]
+   [ run policy_eg_9.cpp /boost/format//boost_format ]
    [ run policy_ref_snip1.cpp : : : <exception-handling>off:<build>no  ]
    [ run policy_ref_snip10.cpp  ]
    [ run policy_ref_snip11.cpp  ]
diff --git a/reporting/accuracy/Jamfile.v2 b/reporting/accuracy/Jamfile.v2
index a07e60083..482b07f1d 100644
--- a/reporting/accuracy/Jamfile.v2
+++ b/reporting/accuracy/Jamfile.v2
@@ -12,7 +12,7 @@ import testing ;
 import modules ;
 import path ;
 import pch ;
-import ../../../config/checks/config : requires ;
+import config : requires ;
 using quickbook ;
 using auto-index ;
 
@@ -80,42 +80,42 @@ rule all-tests {
      local result ;
      for local source in [ glob test*.cpp ]
      {
-         result += [ run $(source) /boost/system /boost/filesystem /boost/test//boost_unit_test_framework 
+         result += [ run $(source) /boost/system//boost_system /boost/filesystem//boost_filesystem /boost/test//boost_unit_test_framework /boost/interprocess//boost_interprocess /boost/multiprecision//boost_multiprecision /boost/type_index//boost_type_index quadmath mpfr
          : : : 
           [ check-target-builds has_gsl : <define>ALWAYS_TEST_DOUBLE : ] 
           <target-os>linux:<linkflags>-lpthread
           <target-os>linux:<linkflags>-lrt
           <toolset>gcc:<linkflags>$(OTHERFLAGS) ]
          ;
-         result += [ run $(source) /boost/system /boost/filesystem /boost/test//boost_unit_test_framework 
+         result += [ run $(source) /boost/system//boost_system /boost/filesystem//boost_filesystem /boost/test//boost_unit_test_framework  /boost/interprocess//boost_interprocess /boost/multiprecision//boost_multiprecision /boost/type_index//boost_type_index quadmath mpfr
          : : : [ check-target-builds has_cxx17_cmath : <define>TEST_CXX17_CMATH : <build>no ] 
           <target-os>linux:<linkflags>-lpthread
           <target-os>linux:<linkflags>-lrt
           <toolset>gcc:<linkflags>$(OTHERFLAGS)
           : $(source:B)_cxx17_cmath ] 
          ;
-         result += [ run $(source) /boost/system /boost/filesystem /boost/test//boost_unit_test_framework 
+         result += [ run $(source) /boost/system//boost_system /boost/filesystem//boost_filesystem /boost/test//boost_unit_test_framework  /boost/interprocess//boost_interprocess /boost/multiprecision//boost_multiprecision /boost/type_index//boost_type_index quadmath mpfr
          : : : [ check-target-builds has_c99_cmath : <define>TEST_C99 : <build>no ] 
           <target-os>linux:<linkflags>-lpthread
           <target-os>linux:<linkflags>-lrt
           <toolset>gcc:<linkflags>$(OTHERFLAGS)
           : $(source:B)_c99 ] 
          ;
-         result += [ run $(source) /boost/system /boost/filesystem /boost/test//boost_unit_test_framework gsl gslcblas
+         result += [ run $(source) /boost/system//boost_system /boost/filesystem//boost_filesystem /boost/test//boost_unit_test_framework /boost/interprocess//boost_interprocess /boost/multiprecision//boost_multiprecision /boost/type_index//boost_type_index gsl gslcblas
          : : : [ check-target-builds has_gsl : <define>TEST_GSL : <build>no ] 
           <target-os>linux:<linkflags>-lpthread
           <target-os>linux:<linkflags>-lrt
           <toolset>gcc:<linkflags>$(OTHERFLAGS)
           : $(source:B)_gsl ] 
          ;
-         result += [ run $(source) /boost/system /boost/filesystem /boost/test//boost_unit_test_framework Rmath
+         result += [ run $(source) /boost/system//boost_system /boost/filesystem//boost_filesystem /boost/test//boost_unit_test_framework /boost/interprocess//boost_interprocess /boost/multiprecision//boost_multiprecision /boost/type_index//boost_type_index Rmath
          : : : [ check-target-builds has_rmath : <define>TEST_RMATH : <build>no ] 
           <target-os>linux:<linkflags>-lpthread
           <target-os>linux:<linkflags>-lrt
           <toolset>gcc:<linkflags>$(OTHERFLAGS)
           : $(source:B)_rmath ] 
          ;
-         result += [ run $(source) /boost/system /boost/filesystem /boost/test//boost_unit_test_framework cephes_double
+         result += [ run $(source) /boost/system//boost_system /boost/filesystem//boost_filesystem /boost/test//boost_unit_test_framework /boost/interprocess//boost_interprocess /boost/multiprecision//boost_multiprecision /boost/type_index//boost_type_index cephes_double
          : : : [ check-target-builds $(here)/third_party/cephes_double/acosh.c : <define>TEST_CEPHES <source>cephes_double : <build>no ] 
           <target-os>linux:<linkflags>-lpthread
           <target-os>linux:<linkflags>-lrt
@@ -159,25 +159,25 @@ boostbook standalone
         <xsl:param>generate.section.toc.level=10
     ;
 
-lib gmp ;
-lib mpfr ;
-lib quadmath ;
+searched-lib gmp : : <link>shared ;
+searched-lib mpfr : : <link>shared ;
+searched-lib quadmath : : <link>shared ;
 #
 # Some manual tests that are expensive to run:
 #
-run erf_error_plot.cpp mpfr gmp : : : release <cxxstd>17 [ check-target-builds ../../config//has_mpfr : : <build>no ] : erf_error_plot_double ;
+run erf_error_plot.cpp /boost/multiprecision//boost_multiprecision mpfr gmp : : : release <cxxstd>17 [ check-target-builds ../../config//has_mpfr : : <build>no ] : erf_error_plot_double ;
 explicit erf_error_plot_double ;
-run erf_error_plot.cpp mpfr gmp : : : release <cxxstd>17 <define>TEST_TYPE="\"long double\"" [ check-target-builds ../../config//has_mpfr : : <build>no ] : erf_error_plot_long_double ;
+run erf_error_plot.cpp /boost/multiprecision//boost_multiprecision mpfr gmp : : : release <cxxstd>17 <define>TEST_TYPE="\"long double\"" [ check-target-builds ../../config//has_mpfr : : <build>no ] : erf_error_plot_long_double ;
 explicit erf_error_plot_long_double ;
-run erf_error_plot.cpp mpfr gmp : : : release <cxxstd>17 <define>TEST_TYPE=cpp_bin_float_50 [ check-target-builds ../../config//has_mpfr : : <build>no ] : erf_error_plot_cpp_bin_float_50 ;
+run erf_error_plot.cpp /boost/multiprecision//boost_multiprecision mpfr gmp : : : release <cxxstd>17 <define>TEST_TYPE=cpp_bin_float_50 [ check-target-builds ../../config//has_mpfr : : <build>no ] : erf_error_plot_cpp_bin_float_50 ;
 explicit erf_error_plot_cpp_bin_float_50 ;
-run erf_error_plot.cpp mpfr gmp quadmath : : : release <cxxstd>17 <cxxstd-dialect>gnu <define>TEST_TYPE=float128 [ check-target-builds ../../config//has_mpfr : : <build>no ] : erf_error_plot_float128 ;
+run erf_error_plot.cpp /boost/multiprecision//boost_multiprecision mpfr gmp quadmath : : : release <cxxstd>17 <cxxstd-dialect>gnu <define>TEST_TYPE=float128 [ check-target-builds ../../config//has_mpfr : : <build>no ] : erf_error_plot_float128 ;
 explicit erf_error_plot_cpp_bin_float_50 ;
-run erfc_error_plot.cpp mpfr gmp : : : release <cxxstd>17 [ check-target-builds ../../config//has_mpfr : : <build>no ] : erfc_error_plot_double ;
+run erfc_error_plot.cpp /boost/multiprecision//boost_multiprecision mpfr gmp : : : release <cxxstd>17 [ check-target-builds ../../config//has_mpfr : : <build>no ] : erfc_error_plot_double ;
 explicit erfc_error_plot_double ;
-run erfc_error_plot.cpp mpfr gmp : : : release <cxxstd>17 <define>TEST_TYPE="\"long double\"" [ check-target-builds ../../config//has_mpfr : : <build>no ] : erfc_error_plot_long_double ;
+run erfc_error_plot.cpp /boost/multiprecision//boost_multiprecision mpfr gmp : : : release <cxxstd>17 <define>TEST_TYPE="\"long double\"" [ check-target-builds ../../config//has_mpfr : : <build>no ] : erfc_error_plot_long_double ;
 explicit erfc_error_plot_long_double ;
-run erfc_error_plot.cpp mpfr gmp : : : release <cxxstd>17 <define>TEST_TYPE=cpp_bin_float_50 [ check-target-builds ../../config//has_mpfr : : <build>no ] : erfc_error_plot_cpp_bin_float_50 ;
+run erfc_error_plot.cpp /boost/multiprecision//boost_multiprecision mpfr gmp : : : release <cxxstd>17 <define>TEST_TYPE=cpp_bin_float_50 [ check-target-builds ../../config//has_mpfr : : <build>no ] : erfc_error_plot_cpp_bin_float_50 ;
 explicit erfc_error_plot_cpp_bin_float_50 ;
-run erfc_error_plot.cpp mpfr gmp quadmath : : : release <cxxstd>17 <cxxstd-dialect>gnu <define>TEST_TYPE=float128 [ check-target-builds ../../config//has_mpfr : : <build>no ] : erfc_error_plot_float128 ;
+run erfc_error_plot.cpp /boost/multiprecision//boost_multiprecision mpfr gmp quadmath : : : release <cxxstd>17 <cxxstd-dialect>gnu <define>TEST_TYPE=float128 [ check-target-builds ../../config//has_mpfr : : <build>no ] : erfc_error_plot_float128 ;
 explicit erfc_error_plot_cpp_bin_float_50 ;
diff --git a/reporting/performance/Jamfile.v2 b/reporting/performance/Jamfile.v2
index 6ea5bc8a2..6d4a8ca58 100644
--- a/reporting/performance/Jamfile.v2
+++ b/reporting/performance/Jamfile.v2
@@ -12,11 +12,11 @@ import testing ;
 import modules ;
 import path ;
 import pch ;
-import ../../../config/checks/config : requires ;
+import config : requires ;
 using quickbook ;
 using auto-index ;
 
-import ../../../predef/check/predef
+import predef
     : check require
     : predef-check predef-require ;
 
@@ -39,9 +39,9 @@ if $(is_unix)
 #
 # Configuration first:
 #
-lib gsl ;
-lib gslcblas ;
-lib Rmath ;
+searched-lib gsl ;
+searched-lib gslcblas ;
+searched-lib Rmath ;
 obj has_libstdcxx_tr1 : ../accuracy/has_libstdcxx_tr1.cpp ;
 explicit has_libstdcxx_tr1 ;
 obj has_c99_cmath : has_c99_cmath.cpp ;
@@ -95,14 +95,14 @@ lib dcdflib : $(here)/third_party/dcdflib/$(DCDFLIB_SOURCE)
 
 explicit dcdflib ;
 
-obj table_helper : table_helper.cpp ;
+obj table_helper : table_helper.cpp /boost/filesystem//boost_filesystem /boost/interprocess//boost_interprocess ;
 
 rule all-tests {
      local result ;
      for local source in [ glob test*.cpp ]
      {
-        result += [ run $(source) /boost/regex//boost_regex /boost/system /boost/chrono /boost/filesystem table_helper
-        : : : release <include>../../test 
+        result += [ run $(source) /boost/regex//boost_regex /boost/system//boost_system /boost/chrono//boost_chrono /boost/filesystem//boost_filesystem /boost/multiprecision//boost_multiprecision /boost/filesystem//boost_filesystem table_helper
+        : : : <variant>release <include>../../test 
         [ check-target-builds ../accuracy//has_c99_cmath : <define>TEST_C99 ] 
         [ check-target-builds has_libstdcxx_tr1 : <define>TEST_LIBSTDCXX ] 
         [ check-target-builds ../accuracy//has_gsl : <define>TEST_GSL <source>gsl <source>gslcblas ]
@@ -120,35 +120,35 @@ rule all-tests {
 # Special cases to test different compiler options,
 # cbrt first as an example of a trivial function:
 #
-run test_cbrt.cpp /boost/regex//boost_regex /boost/system /boost/chrono /boost/filesystem table_helper
+run test_cbrt.cpp /boost/regex//boost_regex /boost/system//boost_system /boost/chrono//boost_chrono /boost/filesystem//boost_filesystem table_helper
      : : : debug <define>COMPILER_COMPARISON_TABLES [ predef-require "BOOST_COMP_MSVC" ] <address-model>32 : test_cbrt_msvc_debug ;
-run test_cbrt.cpp /boost/regex//boost_regex /boost/system /boost/chrono /boost/filesystem table_helper
+run test_cbrt.cpp /boost/regex//boost_regex /boost/system//boost_system /boost/chrono//boost_chrono /boost/filesystem//boost_filesystem table_helper
      : : : release <define>COMPILER_COMPARISON_TABLES [ predef-require "BOOST_COMP_MSVC" ] <cxxflags>-Ox <address-model>32 : test_cbrt_msvc_release_32 ;
-run test_cbrt.cpp /boost/regex//boost_regex /boost/system /boost/chrono /boost/filesystem table_helper
+run test_cbrt.cpp /boost/regex//boost_regex /boost/system//boost_system /boost/chrono//boost_chrono /boost/filesystem//boost_filesystem table_helper
      : : : release <define>COMPILER_COMPARISON_TABLES [ predef-require "BOOST_COMP_MSVC" ] <cxxflags>-Ox <address-model>64 : test_cbrt_msvc_release_64 ;
-run test_cbrt.cpp /boost/regex//boost_regex /boost/system /boost/chrono /boost/filesystem table_helper
+run test_cbrt.cpp /boost/regex//boost_regex /boost/system//boost_system /boost/chrono//boost_chrono /boost/filesystem//boost_filesystem table_helper
      : : : release <define>COMPILER_COMPARISON_TABLES [ check-target-builds is_intel_win : : <build>no ] <toolset>intel:<cxxflags>-Ox <address-model>64 : test_cbrt_intel_release ;
 #
 # Now jn as a little more complex:
 #
-run test_jn.cpp /boost/regex//boost_regex /boost/system /boost/chrono /boost/filesystem table_helper
+run test_jn.cpp /boost/regex//boost_regex /boost/system//boost_system /boost/chrono//boost_chrono /boost/filesystem//boost_filesystem table_helper
    : : : debug <define>COMPILER_COMPARISON_TABLES <include>../../test [ predef-require "BOOST_COMP_MSVC" ] <address-model>32 : test_jn_msvc_debug ;
-run test_jn.cpp /boost/regex//boost_regex /boost/system /boost/chrono /boost/filesystem table_helper
+run test_jn.cpp /boost/regex//boost_regex /boost/system//boost_system /boost/chrono//boost_chrono /boost/filesystem//boost_filesystem table_helper
    : : : release <define>COMPILER_COMPARISON_TABLES <include>../../test [ predef-require "BOOST_COMP_MSVC" ] <cxxflags>-Ox <address-model>32 : test_jn_msvc_release_32 ;
-run test_jn.cpp /boost/regex//boost_regex /boost/system /boost/chrono /boost/filesystem table_helper
+run test_jn.cpp /boost/regex//boost_regex /boost/system//boost_system /boost/chrono//boost_chrono /boost/filesystem//boost_filesystem table_helper
    : : : release <define>COMPILER_COMPARISON_TABLES <include>../../test [ predef-require "BOOST_COMP_MSVC" ] <cxxflags>-Ox <address-model>64 : test_jn_msvc_release_64 ;
-run test_jn.cpp /boost/regex//boost_regex /boost/system /boost/chrono /boost/filesystem table_helper
+run test_jn.cpp /boost/regex//boost_regex /boost/system//boost_system /boost/chrono//boost_chrono /boost/filesystem//boost_filesystem table_helper
    : : : release <define>COMPILER_COMPARISON_TABLES <include>../../test [ check-target-builds is_intel_win : : <build>no ] <address-model>64 : test_jn_intel_release ;
 #
 # Then something really expensive, like the inverse-incomplete-beta:
 #
-run test_ibeta_inv.cpp /boost/regex//boost_regex /boost/system /boost/chrono /boost/filesystem table_helper
+run test_ibeta_inv.cpp /boost/regex//boost_regex /boost/system//boost_system /boost/chrono//boost_chrono /boost/filesystem//boost_filesystem table_helper
    : : : debug <define>COMPILER_COMPARISON_TABLES <include>../../test [ predef-require "BOOST_COMP_MSVC" ] <address-model>32 : test_ibeta_inv_msvc_debug ;
-run test_ibeta_inv.cpp /boost/regex//boost_regex /boost/system /boost/chrono /boost/filesystem table_helper
+run test_ibeta_inv.cpp /boost/regex//boost_regex /boost/system//boost_system /boost/chrono//boost_chrono /boost/filesystem//boost_filesystem table_helper
    : : : release <define>COMPILER_COMPARISON_TABLES <include>../../test [ predef-require "BOOST_COMP_MSVC" ] <cxxflags>-Ox <address-model>32 : test_ibeta_inv_msvc_release_32 ;
-run test_ibeta_inv.cpp /boost/regex//boost_regex /boost/system /boost/chrono /boost/filesystem table_helper
+run test_ibeta_inv.cpp /boost/regex//boost_regex /boost/system//boost_system /boost/chrono//boost_chrono /boost/filesystem//boost_filesystem table_helper
    : : : release <define>COMPILER_COMPARISON_TABLES <include>../../test [ predef-require "BOOST_COMP_MSVC" ] <cxxflags>-Ox <address-model>64 : test_ibeta_inv_msvc_release_64 ;
-run test_ibeta_inv.cpp /boost/regex//boost_regex /boost/system /boost/chrono /boost/filesystem table_helper
+run test_ibeta_inv.cpp /boost/regex//boost_regex /boost/system//boost_system /boost/chrono//boost_chrono /boost/filesystem//boost_filesystem table_helper
    : : : release <define>COMPILER_COMPARISON_TABLES <include>../../test [ check-target-builds is_intel_win : : <build>no ] <toolset>intel:<cxxflags>-Ox <address-model>64 : test_ibeta_inv_intel_release ;
 
 test-suite report_gen : [ all-tests ] test_cbrt_msvc_debug test_cbrt_msvc_release_32 test_cbrt_msvc_release_64 test_cbrt_intel_release 
diff --git a/test/Jamfile.v2 b/test/Jamfile.v2
index f40aa6b9b..40b87ab0a 100644
--- a/test/Jamfile.v2
+++ b/test/Jamfile.v2
@@ -12,7 +12,7 @@ import testing ;
 import modules ;
 import path ;
 import pch ;
-import ../../config/checks/config : requires ;
+import config : requires ;
 
 local ntl-path = [ modules.peek : NTL_PATH ] ;
 local gmp_path = [ modules.peek : GMP_PATH ] ;
@@ -34,6 +34,10 @@ obj no_eh : noeh_support.cpp ;
 
 project
     : requirements
+      <library>/boost/multiprecision//boost_multiprecision
+      <library>/boost/test//boost_test
+      <library>/boost/type_index//boost_type_index
+      <library>/boost/ublas//boost_ublas
       $(OBJ_REMOVAL_OPTIONS)
       <toolset>acc:<cxxflags>+W2068,2461,2236,4070,4069
       <toolset>intel-win:<cxxflags>-nologo
@@ -58,7 +62,6 @@ project
       <toolset>borland:<runtime-link>static
       # <toolset>msvc:<cxxflags>/wd4506 has no effect?
       # suppress xstring(237) : warning C4506: no definition for inline function
-      <include>../../..
       <exception-handling>off:<source>no_eh
       <link>shared:<define>BOOST_REGEX_DYN_LINK=1
       # For simplicities sake, make everything a static lib:
@@ -83,173 +86,180 @@ if $(ntl-path)
 }
 else
 {
-   lib ntl ;
+   searched-lib ntl ;
 }
 
 explicit ntl ;
 
-cpp-pch pch : pch.hpp : <use>../../test/build//boost_unit_test_framework ;
-cpp-pch pch_light : pch_light.hpp : <use>../../test/build//boost_unit_test_framework ;
+cpp-pch pch : pch.hpp : <use>/boost/test//boost_unit_test_framework ;
+cpp-pch pch_light : pch_light.hpp : <use>/boost/test//boost_unit_test_framework ;
 lib compile_test_main : compile_test/main.cpp ;
+ 
+searched-lib quadmath : : <link>shared ;
+alias float128_type : : : :
+    [ check-target-builds ../config//has_intel_quad "Intel _Quad datatype support" : <cxxflags>-Qoption,cpp,--extended_float_type <define>BOOST_MATH_USE_FLOAT128 ]
+    [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" :  <toolset>gcc:<library>quadmath <toolset>gcc:<define>BOOST_MATH_TEST_FLOAT128 ]
+    [ check-target-builds ../config//has_128bit_floatmax_t "128-bit floatmax_t" : <toolset>gcc:<library>quadmath <toolset>gcc:<define>BOOST_MATH_TEST_FLOAT128 : <build>no ]
+    ;
 
 test-suite special_fun :
-   [ run test_1F0.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=1 : test_1F0_1 ] # hypergeometric_pFq_checked_series.hpp uses auto, the rest are from quadrature tests.
-   [ run test_1F0.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=2 : test_1F0_2 ] # hypergeometric_pFq_checked_series.hpp uses auto, the rest are from quadrature tests.
-   [ run test_1F0.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=3 : test_1F0_3 ] # hypergeometric_pFq_checked_series.hpp uses auto, the rest are from quadrature tests.
-   [ run test_2F0.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] <define>TEST=1 : test_2F0_1 ]
-   [ run test_2F0.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] <define>TEST=2 : test_2F0_2 ]
-   [ run test_2F0.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] <define>TEST=3 : test_2F0_3 ]
-   [ run test_2F0.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] <define>TEST=4 : test_2F0_4 ]
+   [ run test_1F0.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=1 : test_1F0_1 ] # hypergeometric_pFq_checked_series.hpp uses auto, the rest are from quadrature tests.
+   [ run test_1F0.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=2 : test_1F0_2 ] # hypergeometric_pFq_checked_series.hpp uses auto, the rest are from quadrature tests.
+   [ run test_1F0.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=3 : test_1F0_3 ] # hypergeometric_pFq_checked_series.hpp uses auto, the rest are from quadrature tests.
+   [ run test_2F0.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <use>float128_type <define>TEST=1 : test_2F0_1 ]
+   [ run test_2F0.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <use>float128_type <define>TEST=2 : test_2F0_2 ]
+   [ run test_2F0.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <use>float128_type <define>TEST=3 : test_2F0_3 ]
+   [ run test_2F0.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <use>float128_type <define>TEST=4 : test_2F0_4 ]
 
-   [ run test_0F1.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=1 : test_0F1_1 ]
-   [ run test_0F1.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=2 : test_0F1_2 ]
+   [ run test_0F1.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=1 : test_0F1_1 ]
+   [ run test_0F1.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=2 : test_0F1_2 ]
 
-   [ run test_1F1.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=1 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_integrals ]
-   [ run test_1F1.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=2 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_float ]
-   [ run test_1F1.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=3 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_double ]
-   [ run test_1F1.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=4 release <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_long_double ]
+   [ run test_1F1.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=1 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_integrals ]
+   [ run test_1F1.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=2 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_float ]
+   [ run test_1F1.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=3 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_double ]
+   [ run test_1F1.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=4 release <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_long_double ]
 
-   [ run test_1F1_regularized.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=2 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_regularized_float ]
-   [ run test_1F1_regularized.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=3 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_regularized_double ]
-   [ run test_1F1_regularized.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=4 release <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_regularized_long_double ]
-   [ run test_1F1_regularized.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=5 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_regularized_real_concept ]
+   [ run test_1F1_regularized.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=2 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_regularized_float ]
+   [ run test_1F1_regularized.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=3 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_regularized_double ]
+   [ run test_1F1_regularized.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=4 release <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_regularized_long_double ]
+   [ run test_1F1_regularized.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=5 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_regularized_real_concept ]
    #  These are slow...
-   [ run test_1F1_log.cpp ../../test/build//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=2 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_log_float ]
-   [ run test_1F1_log.cpp ../../test/build//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=3 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_log_double ]
-   [ run test_1F1_log.cpp ../../test/build//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=4 release <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_log_long_double ]
-   [ run test_1F1_log.cpp ../../test/build//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=5 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_log_real_concept ]
+   [ run test_1F1_log.cpp /boost/test//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=2 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_log_float ]
+   [ run test_1F1_log.cpp /boost/test//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=3 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_log_double ]
+   [ run test_1F1_log.cpp /boost/test//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=4 release <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_log_long_double ]
+   [ run test_1F1_log.cpp /boost/test//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=5 <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_log_real_concept ]
    # pFq:
-   [ run test_pFq.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=2 release <toolset>clang:<cxxflags>-Wno-literal-range : test_pFq_float ]
-   [ run test_pFq.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=3 release <toolset>clang:<cxxflags>-Wno-literal-range : test_pFq_double ]
-   [ run test_pFq.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=4 release <toolset>clang:<cxxflags>-Wno-literal-range : test_pFq_long_double ]
-   [ run test_pFq.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=5 release <toolset>clang:<cxxflags>-Wno-literal-range : test_pFq_real_concept ]
+   [ run test_pFq.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=2 release <toolset>clang:<cxxflags>-Wno-literal-range : test_pFq_float ]
+   [ run test_pFq.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=3 release <toolset>clang:<cxxflags>-Wno-literal-range : test_pFq_double ]
+   [ run test_pFq.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=4 release <toolset>clang:<cxxflags>-Wno-literal-range : test_pFq_long_double ]
+   [ run test_pFq.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=5 release <toolset>clang:<cxxflags>-Wno-literal-range : test_pFq_real_concept ]
 
 
-   [ run hypot_test.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework ]
-   [ run pow_test.cpp ../../test/build//boost_unit_test_framework ]
-   [ run logaddexp_test.cpp ../../test/build//boost_unit_test_framework ]
-   [ run logsumexp_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_variadic_templates ] ]
-   [ run ccmath_sqrt_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_isinf_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_isnan_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_abs_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_isfinite_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_isnormal_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_fpclassify_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_frexp_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_ldexp_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_div_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_logb_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_ilogb_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_scalbn_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_scalbln_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_floor_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_ceil_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_trunc_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_modf_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_round_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_fmod_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_remainder_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_copysign_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_hypot_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_fdim_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_fmax_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_fmin_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_isgreater_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_isgreaterequal_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_isless_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_islessequal_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_isunordered_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_next_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_fma_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run ccmath_signbit_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run log1p_expm1_test.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run powm1_sqrtp1m1_test.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run git_issue_705.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run git_issue_810.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run git_issue_826.cpp ../../test/build//boost_unit_test_framework  ]
+   [ run hypot_test.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework ]
+   [ run pow_test.cpp /boost/test//boost_unit_test_framework ]
+   [ run logaddexp_test.cpp /boost/test//boost_unit_test_framework ]
+   [ run logsumexp_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_variadic_templates ] ]
+   [ run ccmath_sqrt_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_isinf_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_isnan_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_abs_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_isfinite_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_isnormal_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_fpclassify_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_frexp_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_ldexp_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_div_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_logb_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_ilogb_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_scalbn_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_scalbln_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_floor_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_ceil_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_trunc_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_modf_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_round_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_fmod_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_remainder_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_copysign_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_hypot_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_fdim_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_fmax_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_fmin_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_isgreater_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_isgreaterequal_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_isless_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_islessequal_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_isunordered_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_next_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_fma_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run ccmath_signbit_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr ] <use>float128_type ]
+   [ run log1p_expm1_test.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run powm1_sqrtp1m1_test.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run git_issue_705.cpp /boost/test//boost_unit_test_framework  ]
+   [ run git_issue_810.cpp /boost/test//boost_unit_test_framework  ]
+   [ run git_issue_826.cpp /boost/test//boost_unit_test_framework  ]
    [ run git_issue_961.cpp ]
    [ run git_issue_1006.cpp ]
-   [ run special_functions_test.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_airy.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_bessel_j.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_bessel_y.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_bessel_i.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_bessel_k.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_bessel_j_prime.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_bessel_y_prime.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_bessel_i_prime.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_bessel_k_prime.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_beta.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_bessel_airy_zeros.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_bernoulli_constants.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_binomial_coeff.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run test_carlson.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run special_functions_test.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_airy.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_bessel_j.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_bessel_y.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_bessel_i.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_bessel_k.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_bessel_j_prime.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_bessel_y_prime.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_bessel_i_prime.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_bessel_k_prime.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_beta.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_bessel_airy_zeros.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_bernoulli_constants.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_binomial_coeff.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run test_carlson.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
         <define>TEST1
         : test_carlson_1  ]
-   [ run test_carlson.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_carlson.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
         <define>TEST2
       : test_carlson_2  ]
-   [ run test_carlson.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_carlson.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
         <define>TEST3
         : test_carlson_3  ]
-   [ run test_carlson.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_carlson.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
         <define>TEST4
         : test_carlson_4  ]
-   [ run test_cbrt.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_difference.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_digamma.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_ellint_1.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_ellint_2.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_ellint_3.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_ellint_d.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_jacobi_theta.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] ]
-   [ run test_jacobi_zeta.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_heuman_lambda.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_erf.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
+   [ run test_cbrt.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_difference.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_digamma.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_ellint_1.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_ellint_2.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_ellint_3.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_ellint_d.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_jacobi_theta.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] ]
+   [ run test_jacobi_zeta.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_heuman_lambda.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_erf.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
    [ run erf_limits_test.cpp ]
-   [ run test_expint.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_factorials.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run test_gamma.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_gamma_mp.cpp ../../test/build//boost_unit_test_framework : : : release <define>TEST=1 [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] :  test_gamma_mp_1 ]
-   [ run test_gamma_mp.cpp ../../test/build//boost_unit_test_framework : : : release <define>TEST=2 [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_gamma_mp_2 ]
-   [ run test_gamma_mp.cpp ../../test/build//boost_unit_test_framework : : : release <define>TEST=3 [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_gamma_mp_3 ]
-   [ run test_hankel.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_hermite.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_ibeta.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_expint.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_factorials.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run test_gamma.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_gamma_mp.cpp /boost/test//boost_unit_test_framework : : : release <define>TEST=1 [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] :  test_gamma_mp_1 ]
+   [ run test_gamma_mp.cpp /boost/test//boost_unit_test_framework : : : release <define>TEST=2 [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_gamma_mp_2 ]
+   [ run test_gamma_mp.cpp /boost/test//boost_unit_test_framework : : : release <define>TEST=3 [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_gamma_mp_3 ]
+   [ run test_hankel.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_hermite.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_ibeta.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_FLOAT
           <toolset>intel:<pch>off
         : test_ibeta_float  ]
-   [ run test_ibeta.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_DOUBLE
           <toolset>intel:<pch>off
         : test_ibeta_double  ]
-   [ run test_ibeta.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_LDOUBLE
           <toolset>intel:<pch>off
         : test_ibeta_long_double  ]
-   [ run test_ibeta.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -257,7 +267,7 @@ test-suite special_fun :
           <define>TEST_DATA=1
           <toolset>intel:<pch>off
         : test_ibeta_real_concept1  ]
-   [ run test_ibeta.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -265,7 +275,7 @@ test-suite special_fun :
           <define>TEST_DATA=2
           <toolset>intel:<pch>off
         : test_ibeta_real_concept2  ]
-   [ run test_ibeta.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -273,7 +283,7 @@ test-suite special_fun :
           <define>TEST_DATA=3
           <toolset>intel:<pch>off
         : test_ibeta_real_concept3  ]
-   [ run test_ibeta.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -282,7 +292,7 @@ test-suite special_fun :
           <toolset>intel:<pch>off
         : test_ibeta_real_concept4  ]
 
-   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -290,7 +300,7 @@ test-suite special_fun :
           <toolset>intel:<pch>off
           <toolset>gcc:<cxxflags>-Wno-overflow
         : test_ibeta_derivative_float  ]
-   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -298,7 +308,7 @@ test-suite special_fun :
           <toolset>intel:<pch>off
           <toolset>gcc:<cxxflags>-Wno-overflow
         : test_ibeta_derivative_double  ]
-   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -306,7 +316,7 @@ test-suite special_fun :
           <toolset>intel:<pch>off
           <toolset>gcc:<cxxflags>-Wno-overflow
         : test_ibeta_derivative_long_double  ]
-   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -315,7 +325,7 @@ test-suite special_fun :
           <toolset>intel:<pch>off
           <toolset>gcc:<cxxflags>-Wno-overflow
         : test_ibeta_derivative_real_concept1  ]
-   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -324,7 +334,7 @@ test-suite special_fun :
           <toolset>intel:<pch>off
           <toolset>gcc:<cxxflags>-Wno-overflow
         : test_ibeta_derivative_real_concept2  ]
-   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -333,7 +343,7 @@ test-suite special_fun :
           <toolset>intel:<pch>off
           <toolset>gcc:<cxxflags>-Wno-overflow
         : test_ibeta_derivative_real_concept3  ]
-   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_derivative.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -343,28 +353,28 @@ test-suite special_fun :
           <toolset>gcc:<cxxflags>-Wno-overflow
         : test_ibeta_derivative_real_concept4  ]
 
-   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_FLOAT
           <toolset>intel:<pch>off
         : test_ibeta_inv_float  ]
-   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_DOUBLE
           <toolset>intel:<pch>off
         : test_ibeta_inv_double  ]
-   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_LDOUBLE
           <toolset>intel:<pch>off
         : test_ibeta_inv_long_double  ]
-   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -372,7 +382,7 @@ test-suite special_fun :
           <define>TEST_DATA=1
           <toolset>intel:<pch>off
         : test_ibeta_inv_real_concept1  ]
-   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -380,7 +390,7 @@ test-suite special_fun :
           <define>TEST_DATA=2
           <toolset>intel:<pch>off
         : test_ibeta_inv_real_concept2  ]
-   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -388,7 +398,7 @@ test-suite special_fun :
           <define>TEST_DATA=3
           <toolset>intel:<pch>off
         : test_ibeta_inv_real_concept3  ]
-   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_inv.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -396,28 +406,28 @@ test-suite special_fun :
           <define>TEST_DATA=4
           <toolset>intel:<pch>off
         : test_ibeta_inv_real_concept4  ]
-   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_FLOAT
           <toolset>intel:<pch>off
         : test_ibeta_inv_ab_float  ]
-   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_DOUBLE
           <toolset>intel:<pch>off
         : test_ibeta_inv_ab_double  ]
-   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_LDOUBLE
           <toolset>intel:<pch>off
         : test_ibeta_inv_ab_long_double  ]
-   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -425,7 +435,7 @@ test-suite special_fun :
           <define>TEST_DATA=1
           <toolset>intel:<pch>off
         : test_ibeta_inv_ab_real_concept1  ]
-   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_inv_ab.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -433,7 +443,7 @@ test-suite special_fun :
           <define>TEST_DATA=2
           <toolset>intel:<pch>off
         : test_ibeta_inv_ab_real_concept2  ]
-   [ run test_ibeta_inv_ab.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_ibeta_inv_ab.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -441,57 +451,57 @@ test-suite special_fun :
           <define>TEST_DATA=3
           <toolset>intel:<pch>off
         : test_ibeta_inv_ab_real_concept3  ]
-   [ run test_igamma.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_igamma_inv.cpp test_instances//test_instances pch_light  ../../test/build//boost_unit_test_framework
+   [ run test_igamma.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_igamma_inv.cpp test_instances//test_instances pch_light  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_FLOAT
           <toolset>intel:<pch>off
         : test_igamma_inv_float  ]
-   [ run test_igamma_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_igamma_inv.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_DOUBLE
           <toolset>intel:<pch>off
         : test_igamma_inv_double  ]
-   [ run test_igamma_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_igamma_inv.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_LDOUBLE
           <toolset>intel:<pch>off
         : test_igamma_inv_long_double  ]
-   [ run test_igamma_inv.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_igamma_inv.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_REAL_CONCEPT
           <toolset>intel:<pch>off
         : test_igamma_inv_real_concept  ]
-   [ run test_igamma_inva.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_igamma_inva.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_FLOAT
           <toolset>intel:<pch>off
         : test_igamma_inva_float  ]
-   [ run test_igamma_inva.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_igamma_inva.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_DOUBLE
           <toolset>intel:<pch>off
         : test_igamma_inva_double  ]
-   [ run test_igamma_inva.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_igamma_inva.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_LDOUBLE
           <toolset>intel:<pch>off
       : test_igamma_inva_long_double  ]
-   [ run test_igamma_inva.cpp  test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework
+   [ run test_igamma_inva.cpp  test_instances//test_instances pch_light /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -500,22 +510,22 @@ test-suite special_fun :
         : test_igamma_inva_real_concept  ]
    [ run test_instantiate1.cpp test_instantiate2.cpp  ]
    [ run test_instantiate1.cpp test_instantiate2.cpp  : : : <exception-handling>off : test_instantiate_no_eh ]
-   [ run test_jacobi.cpp pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_laguerre.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
+   [ run test_jacobi.cpp pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_laguerre.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
 
-   [ run test_lambert_w.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_lambert_w.cpp ../../test/build//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION=1  [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_lambert_w_multiprecision_1 ]
-   [ run test_lambert_w.cpp ../../test/build//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION=2  [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_lambert_w_multiprecision_2 ]
-   [ run test_lambert_w.cpp ../../test/build//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION=3  [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_lambert_w_multiprecision_3 ]
-   [ run test_lambert_w.cpp ../../test/build//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION=4 <define>BOOST_MATH_TEST_FLOAT128 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_lambert_w_multiprecision_4 ]
-   [ run test_lambert_w_integrals_float128.cpp ../../test/build//boost_unit_test_framework : : : release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" : <build>no ] [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
-   [ run test_lambert_w_integrals_quad.cpp ../../test/build//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
-   [ run test_lambert_w_integrals_long_double.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] ]
-   [ run test_lambert_w_integrals_double.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] ]
-   [ run test_lambert_w_integrals_float.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] ]
-   [ run test_lambert_w_derivative.cpp ../../test/build//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION  [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ]  ]
+   [ run test_lambert_w.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_lambert_w.cpp /boost/test//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION=1  <use>float128_type [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_lambert_w_multiprecision_1 ]
+   [ run test_lambert_w.cpp /boost/test//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION=2  <use>float128_type [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_lambert_w_multiprecision_2 ]
+   [ run test_lambert_w.cpp /boost/test//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION=3  <use>float128_type [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_lambert_w_multiprecision_3 ]
+   [ run test_lambert_w.cpp /boost/test//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION=4 <define>BOOST_MATH_TEST_FLOAT128 <use>float128_type [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_lambert_w_multiprecision_4 ]
+   [ run test_lambert_w_integrals_float128.cpp /boost/test//boost_unit_test_framework : : : release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" : <build>no ] [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
+   [ run test_lambert_w_integrals_quad.cpp /boost/test//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] <use>float128_type [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
+   [ run test_lambert_w_integrals_long_double.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] ]
+   [ run test_lambert_w_integrals_double.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] ]
+   [ run test_lambert_w_integrals_float.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] ]
+   [ run test_lambert_w_derivative.cpp /boost/test//boost_unit_test_framework : : : <define>BOOST_MATH_TEST_MULTIPRECISION  <use>float128_type  ]
 
-   [ run test_legendre.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework : : : [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" ]  ]
+   [ run test_legendre.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework : : : [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" ]  ]
    [ run chebyshev_test.cpp  : : : [ requires cxx11_inline_namespaces cxx11_unified_initialization_syntax cxx11_hdr_tuple cxx11_smart_ptr cxx11_defaulted_functions cxx11_auto_declarations cxx11_range_based_for cxx11_constexpr ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" ]  ]
    [ run chebyshev_transform_test.cpp ../config//fftw3f : : : <define>TEST1 [ requires cxx11_smart_ptr cxx11_defaulted_functions cxx11_auto_declarations cxx11_range_based_for ] [ check-target-builds ../config//has_fftw3 "libfftw3" : : <build>no ] : chebyshev_transform_test_1 ]
    [ run chebyshev_transform_test.cpp ../config//fftw3 : : : <define>TEST2 [ requires cxx11_smart_ptr cxx11_defaulted_functions cxx11_auto_declarations cxx11_range_based_for ] [ check-target-builds ../config//has_fftw3 "libfftw3" : : <build>no ] : chebyshev_transform_test_2 ]
@@ -528,52 +538,52 @@ test-suite special_fun :
    [ run cardinal_trigonometric_test.cpp ../config//fftw3q ../config//quadmath : : : <define>TEST4 [ requires cxx11_auto_declarations cxx11_range_based_for ] [ check-target-builds ../config//has_fftw3 "libfftw3" : : <build>no ] [ check-target-builds ../config//has_float128 "__float128" : : <build>no ] : cardinal_trigonometric_test_4 ]
 
 
-   [ run test_ldouble_simple.cpp ../../test/build//boost_unit_test_framework  ]
+   [ run test_ldouble_simple.cpp /boost/test//boost_unit_test_framework  ]
    # Needs to run in release mode, as it's rather slow:
-   [ run test_next.cpp pch ../../test/build//boost_unit_test_framework : : : release  ]
-   [ run test_next_decimal.cpp pch ../../test/build//boost_unit_test_framework : : : release  ]
-   [ run test_owens_t.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_polygamma.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_trigamma.cpp test_instances//test_instances ../../test/build//boost_unit_test_framework  ]
-   [ run test_round.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run git_issue_430.cpp pch ../../test/build//boost_unit_test_framework ]
-   [ run test_spherical_harmonic.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_sign.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_tgamma_for_issue396_part1.cpp ../../test/build//boost_unit_test_framework : : : [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" ] <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] ]
-   [ run test_tgamma_for_issue396_part2.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ]  ]
-   [ run test_tgamma_ratio.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_trig.cpp test_instances//test_instances pch_light ../../test/build//boost_unit_test_framework  ]
-   [ run test_zeta.cpp ../../test/build//boost_unit_test_framework test_instances//test_instances pch_light  ]
-   [ run test_sinc.cpp ../../test/build//boost_unit_test_framework pch_light ]
-   [ run test_fibonacci.cpp ../../test/build//boost_unit_test_framework ]
+   [ run test_next.cpp pch /boost/test//boost_unit_test_framework : : : release  ]
+   [ run test_next_decimal.cpp pch /boost/test//boost_unit_test_framework : : : release  ]
+   [ run test_owens_t.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_polygamma.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_trigamma.cpp test_instances//test_instances /boost/test//boost_unit_test_framework  ]
+   [ run test_round.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run git_issue_430.cpp pch /boost/test//boost_unit_test_framework ]
+   [ run test_spherical_harmonic.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_sign.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_tgamma_for_issue396_part1.cpp /boost/test//boost_unit_test_framework : : : <use>float128_type <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] ]
+   [ run test_tgamma_for_issue396_part2.cpp /boost/test//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ]  ]
+   [ run test_tgamma_ratio.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_trig.cpp test_instances//test_instances pch_light /boost/test//boost_unit_test_framework  ]
+   [ run test_zeta.cpp /boost/test//boost_unit_test_framework test_instances//test_instances pch_light  ]
+   [ run test_sinc.cpp /boost/test//boost_unit_test_framework pch_light ]
+   [ run test_fibonacci.cpp /boost/test//boost_unit_test_framework ]
 ;
 
 test-suite distribution_tests :
-   [ run test_arcsine.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run test_bernoulli.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_beta_dist.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_arcsine.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run test_bernoulli.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_beta_dist.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_binomial.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_FLOAT
           <toolset>intel:<pch>off
         : test_binomial_float  ]
-   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_binomial.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_DOUBLE
           <toolset>intel:<pch>off
         : test_binomial_double  ]
-   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_binomial.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_LDOUBLE
           <toolset>intel:<pch>off
         : test_binomial_long_double  ]
-   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_binomial.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -581,7 +591,7 @@ test-suite distribution_tests :
           <define>TEST_ROUNDING=0
           <toolset>intel:<pch>off
         : test_binomial_real_concept0  ]
-   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_binomial.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -589,7 +599,7 @@ test-suite distribution_tests :
           <define>TEST_ROUNDING=1
           <toolset>intel:<pch>off
         : test_binomial_real_concept1  ]
-   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_binomial.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -597,7 +607,7 @@ test-suite distribution_tests :
           <define>TEST_ROUNDING=2
           <toolset>intel:<pch>off
         : test_binomial_real_concept2  ]
-   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_binomial.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -605,7 +615,7 @@ test-suite distribution_tests :
           <define>TEST_ROUNDING=3
           <toolset>intel:<pch>off
         : test_binomial_real_concept3  ]
-   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_binomial.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -613,7 +623,7 @@ test-suite distribution_tests :
           <define>TEST_ROUNDING=4
           <toolset>intel:<pch>off
         : test_binomial_real_concept4  ]
-   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_binomial.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -621,7 +631,7 @@ test-suite distribution_tests :
           <define>TEST_ROUNDING=5
           <toolset>intel:<pch>off
         : test_binomial_real_concept5  ]
-   [ run test_binomial.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_binomial.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -629,145 +639,145 @@ test-suite distribution_tests :
           <define>TEST_ROUNDING=6
           <toolset>intel:<pch>off
         : test_binomial_real_concept6  ]
-   [ run test_cauchy.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_chi_squared.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_dist_overloads.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_exponential_dist.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_extreme_value.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_find_location.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run test_find_scale.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run test_fisher_f.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_gamma_dist.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run test_geometric.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_hyperexponential_dist.cpp ../../test/build//boost_unit_test_framework ]
-   [ run test_hypergeometric_dist.cpp ../../test/build//boost_unit_test_framework
+   [ run test_cauchy.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_chi_squared.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_dist_overloads.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_exponential_dist.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_extreme_value.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_find_location.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run test_find_scale.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run test_fisher_f.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_gamma_dist.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run test_geometric.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_hyperexponential_dist.cpp /boost/test//boost_unit_test_framework ]
+   [ run test_hypergeometric_dist.cpp /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_QUANT=0
           <toolset>intel:<pch>off
         : test_hypergeometric_dist0  ]
-   [ run test_hypergeometric_dist.cpp ../../test/build//boost_unit_test_framework
+   [ run test_hypergeometric_dist.cpp /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_QUANT=1
           <toolset>intel:<pch>off
         : test_hypergeometric_dist1  ]
-   [ run test_hypergeometric_dist.cpp ../../test/build//boost_unit_test_framework
+   [ run test_hypergeometric_dist.cpp /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_QUANT=2
           <toolset>intel:<pch>off
         : test_hypergeometric_dist2  ]
-   [ run test_hypergeometric_dist.cpp ../../test/build//boost_unit_test_framework
+   [ run test_hypergeometric_dist.cpp /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_QUANT=3
           <toolset>intel:<pch>off
         : test_hypergeometric_dist3  ]
-   [ run test_hypergeometric_dist.cpp ../../test/build//boost_unit_test_framework
+   [ run test_hypergeometric_dist.cpp /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_QUANT=4
           <toolset>intel:<pch>off
         : test_hypergeometric_dist4  ]
-   [ run test_hypergeometric_dist.cpp ../../test/build//boost_unit_test_framework
+   [ run test_hypergeometric_dist.cpp /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_QUANT=5
           <toolset>intel:<pch>off
         : test_hypergeometric_dist5  ]
-   [ run test_inverse_chi_squared_distribution.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_inverse_gamma_distribution.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_inverse_gaussian.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_kolmogorov_smirnov.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] ]
-   [ run test_laplace.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_inv_hyp.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run test_logistic_dist.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_lognormal.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_negative_binomial.cpp ../../test/build//boost_unit_test_framework
+   [ run test_inverse_chi_squared_distribution.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_inverse_gamma_distribution.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_inverse_gaussian.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_kolmogorov_smirnov.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] ]
+   [ run test_laplace.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_inv_hyp.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run test_logistic_dist.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_lognormal.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_negative_binomial.cpp /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_FLOAT
           <toolset>intel:<pch>off
         : test_negative_binomial_float  ]
-   [ run test_negative_binomial.cpp ../../test/build//boost_unit_test_framework
+   [ run test_negative_binomial.cpp /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_DOUBLE
           <toolset>intel:<pch>off
         : test_negative_binomial_double  ]
-   [ run test_negative_binomial.cpp ../../test/build//boost_unit_test_framework
+   [ run test_negative_binomial.cpp /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_LDOUBLE
           <toolset>intel:<pch>off
         : test_negative_binomial_long_double  ]
-   [ run test_negative_binomial.cpp ../../test/build//boost_unit_test_framework
+   [ run test_negative_binomial.cpp /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_REAL_CONCEPT
           <toolset>intel:<pch>off
         : test_negative_binomial_real_concept  ]
-   [ run test_nc_chi_squared.cpp  pch ../../test/build//boost_unit_test_framework
+   [ run test_nc_chi_squared.cpp  pch /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_FLOAT
           <toolset>intel:<pch>off
         : test_nc_chi_squared_float  ]
-   [ run test_nc_chi_squared.cpp  pch ../../test/build//boost_unit_test_framework
+   [ run test_nc_chi_squared.cpp  pch /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_DOUBLE
           <toolset>intel:<pch>off
         : test_nc_chi_squared_double  ]
-   [ run test_nc_chi_squared.cpp  pch ../../test/build//boost_unit_test_framework
+   [ run test_nc_chi_squared.cpp  pch /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_LDOUBLE
           <toolset>intel:<pch>off
         : test_nc_chi_squared_long_double  ]
-   [ run test_nc_chi_squared.cpp  pch ../../test/build//boost_unit_test_framework
+   [ run test_nc_chi_squared.cpp  pch /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_REAL_CONCEPT
           <toolset>intel:<pch>off
         : test_nc_chi_squared_real_concept  ]
-   [ run test_nc_beta.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_nc_beta.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_FLOAT
           <toolset>intel:<pch>off
         : test_nc_beta_float  ]
-   [ run test_nc_beta.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_nc_beta.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_DOUBLE
           <toolset>intel:<pch>off
         : test_nc_beta_double  ]
-   [ run test_nc_beta.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_nc_beta.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_LDOUBLE
           <toolset>intel:<pch>off
         : test_nc_beta_long_double  ]
-   [ run test_nc_beta.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_nc_beta.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -775,7 +785,7 @@ test-suite distribution_tests :
           <define>TEST_DATA=1
           <toolset>intel:<pch>off
         : test_nc_beta_real_concept1  ]
-   [ run test_nc_beta.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_nc_beta.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
@@ -783,71 +793,71 @@ test-suite distribution_tests :
           <define>TEST_DATA=2
           <toolset>intel:<pch>off
         : test_nc_beta_real_concept2  ]
-   [ run test_nc_f.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run test_nc_t.cpp  pch ../../test/build//boost_unit_test_framework
+   [ run test_nc_f.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run test_nc_t.cpp  pch /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_FLOAT
           <toolset>intel:<pch>off
         : test_nc_t_float  ]
-   [ run test_nc_t.cpp  pch ../../test/build//boost_unit_test_framework
+   [ run test_nc_t.cpp  pch /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_DOUBLE
           <toolset>intel:<pch>off
         : test_nc_t_double  ]
-   [ run test_nc_t.cpp  pch ../../test/build//boost_unit_test_framework
+   [ run test_nc_t.cpp  pch /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_LDOUBLE
           <toolset>intel:<pch>off
         : test_nc_t_long_double  ]
-   [ run test_nc_t.cpp  pch ../../test/build//boost_unit_test_framework
+   [ run test_nc_t.cpp  pch /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_REAL_CONCEPT
           <toolset>intel:<pch>off
         : test_nc_t_real_concept  ]
-   [ run test_normal.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run test_pareto.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_poisson.cpp ../../test/build//boost_unit_test_framework
+   [ run test_normal.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run test_pareto.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_poisson.cpp /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_FLOAT
           <toolset>intel:<pch>off
         : test_poisson_float  ]
-   [ run test_poisson.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_poisson.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_DOUBLE
           <toolset>intel:<pch>off
         : test_poisson_double  ]
-   [ run test_poisson.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_poisson.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_LDOUBLE
           <toolset>intel:<pch>off
         : test_poisson_long_double  ]
-   [ run test_poisson.cpp  ../../test/build//boost_unit_test_framework
+   [ run test_poisson.cpp  /boost/test//boost_unit_test_framework
         : # command line
         : # input files
         : # requirements
           <define>TEST_REAL_CONCEPT
           <toolset>intel:<pch>off
         : test_poisson_real_concept  ]
-   [ run test_rayleigh.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_students_t.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_skew_normal.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_triangular.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run test_uniform.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run test_weibull.cpp ../../test/build//boost_unit_test_framework  ]
+   [ run test_rayleigh.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_students_t.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_skew_normal.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_triangular.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run test_uniform.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run test_weibull.cpp /boost/test//boost_unit_test_framework ]
 
    [ run  compile_test/dist_bernoulli_incl_test.cpp compile_test_main : : : [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ]  ]
    [ run  compile_test/dist_beta_incl_test.cpp compile_test_main : : : [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ]  ]
@@ -948,13 +958,13 @@ test-suite misc :
    ../build//boost_math_tr1f
    ../build//boost_math_c99
    ../build//boost_math_c99f
-   ../../test/build//boost_unit_test_framework
+   /boost/test//boost_unit_test_framework
      ]
 
    [ run test_tr1.cpp
       ../build//boost_math_tr1l
       ../build//boost_math_c99l
-      ../../test/build//boost_unit_test_framework
+      /boost/test//boost_unit_test_framework
       : : :
       <define>TEST_LD=1
       [ check-target-builds ../config//has_long_double_support "long double support" : : <build>no ]
@@ -967,7 +977,7 @@ test-suite misc :
       ../build//boost_math_tr1f
       ../build//boost_math_c99
       ../build//boost_math_c99f
-      ../../test/build//boost_unit_test_framework
+      /boost/test//boost_unit_test_framework
       : : : #requirements
       :
       test_tr1_c
@@ -976,23 +986,23 @@ test-suite misc :
    [ run test_tr1.c
       ../build//boost_math_tr1l
       ../build//boost_math_c99l
-      ../../test/build//boost_unit_test_framework
+      /boost/test//boost_unit_test_framework
       : : :
       <define>TEST_LD=1
       [ check-target-builds ../config//has_long_double_support "long double support" : : <build>no ]
       :
       test_tr1_c_long_double
     ]
-   [ run test_constants.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] ]
-   [ run simple_continued_fraction_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] ]
-   [ run centered_continued_fraction_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] ]
-   [ run luroth_expansion_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] ]
-   [ run engel_expansion_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] ]
-   [ run test_classify.cpp pch ../../test/build//boost_unit_test_framework : : : <toolset>msvc:<cxxflags>/bigobj ]
-   [ run test_error_handling.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run legendre_stieltjes_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_range_based_for ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]  ]
-   [ run test_minima.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run test_rationals.cpp ../../test/build//boost_unit_test_framework
+   [ run test_constants.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] <use>float128_type ]
+   [ run simple_continued_fraction_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] <use>float128_type ]
+   [ run centered_continued_fraction_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] <use>float128_type ]
+   [ run luroth_expansion_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] <use>float128_type ]
+   [ run engel_expansion_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] <use>float128_type ]
+   [ run test_classify.cpp pch /boost/test//boost_unit_test_framework : : : <toolset>msvc:<cxxflags>/bigobj ]
+   [ run test_error_handling.cpp /boost/test//boost_unit_test_framework  ]
+   [ run legendre_stieltjes_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_range_based_for ] <use>float128_type  ]
+   [ run test_minima.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run test_rationals.cpp /boost/test//boost_unit_test_framework
       test_rational_instances/test_rational_double1.cpp
       test_rational_instances/test_rational_double2.cpp
       test_rational_instances/test_rational_double3.cpp
@@ -1013,49 +1023,49 @@ test-suite misc :
       test_rational_instances/test_rational_real_concept4.cpp
       test_rational_instances/test_rational_real_concept5.cpp
    ]
-   [ run test_policy.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_policy_2.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_policy_3.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_policy_4.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_policy_5.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_policy_6.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_policy_7.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_policy_8.cpp ../../test/build//boost_unit_test_framework  ]
+   [ run test_policy.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_policy_2.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_policy_3.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_policy_4.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_policy_5.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_policy_6.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_policy_7.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_policy_8.cpp /boost/test//boost_unit_test_framework  ]
    [ compile test_policy_9.cpp  ]
-   [ run test_policy_10.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_policy_sf.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_long_double_support.cpp ../../test/build//boost_unit_test_framework
+   [ run test_policy_10.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_policy_sf.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_long_double_support.cpp /boost/test//boost_unit_test_framework
       : : : [ check-target-builds ../config//has_long_double_support "long double support" : : <build>no ] ]
    [ run test_recurrence.cpp : : : <define>TEST=1 [ requires cxx11_unified_initialization_syntax cxx11_hdr_tuple cxx11_auto_declarations cxx11_decltype ] <toolset>msvc:<cxxflags>/bigobj : test_recurrence_1 ]
-   [ run test_recurrence.cpp : : : <define>TEST=2 release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] [ requires cxx11_unified_initialization_syntax cxx11_hdr_tuple cxx11_auto_declarations cxx11_decltype ]  : test_recurrence_2 ]
-   [ run test_recurrence.cpp : : : <define>TEST=3 release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] [ requires cxx11_unified_initialization_syntax cxx11_hdr_tuple cxx11_auto_declarations cxx11_decltype ]  : test_recurrence_3 ]
+   [ run test_recurrence.cpp : : : <define>TEST=2 release <use>float128_type [ requires cxx11_unified_initialization_syntax cxx11_hdr_tuple cxx11_auto_declarations cxx11_decltype ]  : test_recurrence_2 ]
+   [ run test_recurrence.cpp : : : <define>TEST=3 release <use>float128_type [ requires cxx11_unified_initialization_syntax cxx11_hdr_tuple cxx11_auto_declarations cxx11_decltype ]  : test_recurrence_3 ]
 
    [ run test_print_info_on_type.cpp  ]
-   [ run univariate_statistics_test.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx17_if_constexpr cxx17_std_apply ] ]
-   [ run univariate_statistics_backwards_compatible_test.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_hdr_forward_list cxx11_hdr_atomic cxx11_hdr_thread cxx11_hdr_tuple cxx11_hdr_future cxx11_sfinae_expr ] ]
-   [ run ooura_fourier_integral_test.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" ] [ requires cxx17_if_constexpr cxx17_std_apply ] ]
+   [ run univariate_statistics_test.cpp /boost/test//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx17_if_constexpr cxx17_std_apply ] ]
+   [ run univariate_statistics_backwards_compatible_test.cpp /boost/test//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_hdr_forward_list cxx11_hdr_atomic cxx11_hdr_thread cxx11_hdr_tuple cxx11_hdr_future cxx11_sfinae_expr ] ]
+   [ run ooura_fourier_integral_test.cpp /boost/test//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" ] [ requires cxx17_if_constexpr cxx17_std_apply ] ]
    [ run empirical_cumulative_distribution_test.cpp  : : :  [ requires cxx17_if_constexpr cxx17_std_apply ] ]
-   [ run norms_test.cpp ../../test/build//boost_unit_test_framework : : :  [ requires cxx17_if_constexpr cxx17_std_apply ] ]
+   [ run norms_test.cpp /boost/test//boost_unit_test_framework : : :  [ requires cxx17_if_constexpr cxx17_std_apply ] ]
    [ run signal_statistics_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] ]
    [ run anderson_darling_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] ]
    [ run ljung_box_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] ]
    [ run cubic_roots_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] ]
    [ run quartic_roots_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] ]
-   [ run test_t_test.cpp : : : [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] [ requires cxx11_hdr_forward_list cxx11_hdr_atomic cxx11_hdr_thread cxx11_hdr_tuple cxx11_hdr_future cxx11_sfinae_expr ]  ]
-   [ run test_z_test.cpp : : : [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] [ requires cxx11_hdr_forward_list cxx11_hdr_atomic cxx11_hdr_thread cxx11_hdr_tuple cxx11_hdr_future cxx11_sfinae_expr ]  ]
+   [ run test_t_test.cpp : : : <use>float128_type [ requires cxx11_hdr_forward_list cxx11_hdr_atomic cxx11_hdr_thread cxx11_hdr_tuple cxx11_hdr_future cxx11_sfinae_expr ]  ]
+   [ run test_z_test.cpp : : : <use>float128_type [ requires cxx11_hdr_forward_list cxx11_hdr_atomic cxx11_hdr_thread cxx11_hdr_tuple cxx11_hdr_future cxx11_sfinae_expr ]  ]
    [ run bivariate_statistics_test.cpp : : : [ requires cxx11_hdr_forward_list cxx11_hdr_atomic cxx11_hdr_thread cxx11_hdr_tuple cxx11_hdr_future cxx11_sfinae_expr ] [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] ]
    [ run linear_regression_test.cpp : : : [ requires cxx11_hdr_forward_list cxx11_hdr_atomic cxx11_hdr_thread cxx11_hdr_tuple cxx11_hdr_future cxx11_sfinae_expr ]  ]
    [ run test_runs_test.cpp : : : [ requires cxx17_if_constexpr cxx17_std_apply ] ]
-   [ run test_chatterjee_correlation.cpp ../../test/build//boost_unit_test_framework ]
-   [ run test_rank.cpp ../../test/build//boost_unit_test_framework ]
-   [ run lanczos_smoothing_test.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx17_if_constexpr cxx17_std_apply ] ]
-   [ run condition_number_test.cpp ../../test/build//boost_unit_test_framework : : : <toolset>msvc:<cxxflags>/bigobj [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
-   [ run test_real_concept.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_remez.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run test_roots.cpp pch ../../test/build//boost_unit_test_framework  ]
-   [ run test_root_iterations.cpp pch ../../test/build//boost_unit_test_framework : : : [ requires cxx11_hdr_tuple ]  ]
-   [ run test_root_finding_concepts.cpp ../../test/build//boost_unit_test_framework  ]
-   [ run test_toms748_solve.cpp pch ../../test/build//boost_unit_test_framework  ]
+   [ run test_chatterjee_correlation.cpp /boost/test//boost_unit_test_framework ]
+   [ run test_rank.cpp /boost/test//boost_unit_test_framework ]
+   [ run lanczos_smoothing_test.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx17_if_constexpr cxx17_std_apply ] ]
+   [ run condition_number_test.cpp /boost/test//boost_unit_test_framework : : : <toolset>msvc:<cxxflags>/bigobj [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
+   [ run test_real_concept.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_remez.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run test_roots.cpp pch /boost/test//boost_unit_test_framework  ]
+   [ run test_root_iterations.cpp pch /boost/test//boost_unit_test_framework : : : [ requires cxx11_hdr_tuple ]  ]
+   [ run test_root_finding_concepts.cpp /boost/test//boost_unit_test_framework  ]
+   [ run test_toms748_solve.cpp pch /boost/test//boost_unit_test_framework  ]
    [ run  compile_test/interpolators_cubic_spline_incl_test.cpp compile_test_main : : :  [ requires cxx11_smart_ptr cxx11_defaulted_functions cxx11_auto_declarations ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
    [ run  compile_test/interpolators_barycentric_rational_incl_test.cpp compile_test_main : : :  [ requires cxx11_smart_ptr cxx11_defaulted_functions cxx11_auto_declarations cxx11_unified_initialization_syntax ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
    [ compile  compile_test/interpolators_cubic_hermite_incl_test.cpp :  [ requires cxx11_smart_ptr cxx11_defaulted_functions cxx11_auto_declarations ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
@@ -1144,7 +1154,7 @@ test-suite misc :
    [ compile compile_test/std_real_concept_check.cpp  : <define>EMULATE128 [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : std_real_concept_check_128 ]
    [ run  compile_test/cstdfloat_concept_check_1.cpp
       : : : [ check-target-builds ../config//has_intel_quad "Intel _Quad datatype support" : <cxxflags>-Qoption,cpp,--extended_float_type ]
-            [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
+            <use>float128_type [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
    [ run  compile_test/cstdfloat_concept_check_2.cpp  : : : [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
    [ run  compile_test/cstdfloat_concept_check_3.cpp  : : : [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
    [ run  compile_test/cstdfloat_concept_check_4.cpp  : : : [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
@@ -1153,7 +1163,7 @@ test-suite misc :
    [ compile  compile_test/cstdfloat_iostream_incl_test.cpp : [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
    [ compile  compile_test/cstdfloat_limits_incl_test.cpp : [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
    [ compile  compile_test/cstdfloat_types_incl_test.cpp : [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
-   [ run  test_cstdfloat.cpp ../../test/build//boost_unit_test_framework  : : : [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
+   [ run  test_cstdfloat.cpp /boost/test//boost_unit_test_framework  : : : <use>float128_type [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
    [ run  compile_test/sf_airy_incl_test.cpp compile_test_main  : : : [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
    [ run  compile_test/sf_hankel_incl_test.cpp compile_test_main  : : : [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
    [ run  compile_test/sf_jacobi_incl_test.cpp compile_test_main  : : : [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
@@ -1207,14 +1217,14 @@ test-suite misc :
    [ compile  compile_test/sf_legendre_stieltjes_concept_test.cpp : [ requires cxx11_auto_declarations cxx11_defaulted_functions cxx11_lambdas ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ]  ]
    [ compile  compile_test/quad_trapezoidal_concept_test.cpp : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_decltype cxx11_unified_initialization_syntax cxx11_variadic_templates ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
    [ run octonion_test.cpp
-       ../../test/build//boost_unit_test_framework ]
+       /boost/test//boost_unit_test_framework ]
    [ run quaternion_constexpr_test.cpp ]
    [ run quaternion_test.cpp
-       ../../test/build//boost_unit_test_framework : : : <toolset>msvc-14.0:<debug-symbols>off [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] ]
+       /boost/test//boost_unit_test_framework : : : <toolset>msvc-14.0:<debug-symbols>off <use>float128_type ]
    [ run quaternion_mult_incl_test.cpp
        quaternion_mi1.cpp
        quaternion_mi2.cpp
-       ../../test/build//boost_unit_test_framework ]
+       /boost/test//boost_unit_test_framework ]
 
 #   [ run __temporary_test.cpp test_instances//test_instances : : : <test-info>always_show_run_output <pch>off ]
    [ compile test_no_long_double_policy.cpp ]
@@ -1361,27 +1371,27 @@ test-suite quadrature :
    [ compile  compile_test/quad_sinh_sinh_concept_test.cpp : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
    [ compile  compile_test/quad_tanh_sinh_concept_test.cpp : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax sfinae_expr ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
 
-   [ run gauss_quadrature_test.cpp : : : <define>TEST1 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
+   [ run gauss_quadrature_test.cpp : : : <define>TEST1 <use>float128_type
      [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release : gauss_quadrature_test_1 ]
-   [ run gauss_quadrature_test.cpp : : : <define>TEST2 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
+   [ run gauss_quadrature_test.cpp : : : <define>TEST2 <use>float128_type
      [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : gauss_quadrature_test_2 ]
-   [ run gauss_quadrature_test.cpp : : : <define>TEST3 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
+   [ run gauss_quadrature_test.cpp : : : <define>TEST3 <use>float128_type
      [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : gauss_quadrature_test_3 ]
-   [ run gauss_kronrod_quadrature_test.cpp : : : <define>TEST1 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
+   [ run gauss_kronrod_quadrature_test.cpp : : : <define>TEST1 <use>float128_type
      [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release : gauss_kronrod_quadrature_test_1 ]
-   [ run gauss_kronrod_quadrature_test.cpp : : : <define>TEST1A [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
+   [ run gauss_kronrod_quadrature_test.cpp : : : <define>TEST1A <use>float128_type
      [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : gauss_kronrod_quadrature_test_1a ]
-   [ run gauss_kronrod_quadrature_test.cpp : : : <define>TEST2 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
+   [ run gauss_kronrod_quadrature_test.cpp : : : <define>TEST2 <use>float128_type
      [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : gauss_kronrod_quadrature_test_2 ]
-   [ run gauss_kronrod_quadrature_test.cpp : : : <define>TEST3 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
+   [ run gauss_kronrod_quadrature_test.cpp : : : <define>TEST3 <use>float128_type
      [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : gauss_kronrod_quadrature_test_3 ]
-   [ run adaptive_gauss_kronrod_quadrature_test.cpp : : : <define>TEST1 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
+   [ run adaptive_gauss_kronrod_quadrature_test.cpp : : : <define>TEST1 <use>float128_type
      [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release : adaptive_gauss_quadrature_test_1 ]
-   [ run adaptive_gauss_kronrod_quadrature_test.cpp : : : <define>TEST1A [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
+   [ run adaptive_gauss_kronrod_quadrature_test.cpp : : : <define>TEST1A <use>float128_type
      [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : adaptive_gauss_quadrature_test_1a ]
-   [ run adaptive_gauss_kronrod_quadrature_test.cpp : : : <define>TEST2 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
+   [ run adaptive_gauss_kronrod_quadrature_test.cpp : : : <define>TEST2 <use>float128_type
      [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : adaptive_gauss_quadrature_test_2 ]
-   [ run adaptive_gauss_kronrod_quadrature_test.cpp : : : <define>TEST3 [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
+   [ run adaptive_gauss_kronrod_quadrature_test.cpp : : : <define>TEST3 <use>float128_type
      [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : adaptive_gauss_quadrature_test_3 ]
 
    [ run naive_monte_carlo_test.cpp : : :
@@ -1485,26 +1495,26 @@ test-suite quadrature :
    [ compile compile_test/gauss_kronrod_concept_test.cpp : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_smart_ptr cxx11_unified_initialization_syntax ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] ]
    [ run git_issue_898.cpp ]
 
-   [ run test_trapezoidal.cpp ../../test/build//boost_unit_test_framework : : :
+   [ run test_trapezoidal.cpp /boost/test//boost_unit_test_framework float128_type : : :
       release [ requires cxx11_lambdas cxx11_auto_declarations cxx11_decltype cxx11_unified_initialization_syntax cxx11_variadic_templates ]
-      [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>"-Bstatic -lquadmath -Bdynamic" ] ]
+      ]
 ;
 
 test-suite autodiff :
-   [ run test_numerical_differentiation.cpp ../../test/build//boost_unit_test_framework  : : : <toolset>msvc:<cxxflags>/bigobj [ requires cxx11_auto_declarations cxx11_constexpr ] ]
+   [ run test_numerical_differentiation.cpp /boost/test//boost_unit_test_framework  : : : <toolset>msvc:<cxxflags>/bigobj [ requires cxx11_auto_declarations cxx11_constexpr ] ]
    [ run  compile_test/diff_numerical_differentiation_incl_test.cpp compile_test_main  : : : [ requires cxx11_auto_declarations cxx11_constexpr ] ]
    [ compile  compile_test/diff_numerical_differentiation_concept_test.cpp  : [ requires cxx11_auto_declarations cxx11_constexpr ] ]
-   [ run test_autodiff_1.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
-   [ run test_autodiff_2.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
-   [ run test_autodiff_3.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
-   [ run test_autodiff_4.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
-   [ run test_autodiff_5.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
-   [ run test_autodiff_6.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
-   [ run test_autodiff_7.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
-   [ run test_autodiff_8.cpp ../../test/build//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ check-target-builds ../config//is_ci_standalone_run "Standalone CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
-   [ compile compile_test/diff_autodiff_incl_test.cpp : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
-   [ compile compile_test/diff_finite_difference_incl_test.cpp : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
-   [ compile compile_test/diff_lanczos_smoothing_incl_test.cpp : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ requires cxx17_if_constexpr cxx17_std_apply ] [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ] [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
+   [ run test_autodiff_1.cpp /boost/test//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release <use>float128_type [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
+   [ run test_autodiff_2.cpp /boost/test//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release <use>float128_type [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
+   [ run test_autodiff_3.cpp /boost/test//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release <use>float128_type [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
+   [ run test_autodiff_4.cpp /boost/test//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release <use>float128_type [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
+   [ run test_autodiff_5.cpp /boost/test//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release <use>float128_type [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
+   [ run test_autodiff_6.cpp /boost/test//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release <use>float128_type [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
+   [ run test_autodiff_7.cpp /boost/test//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release <use>float128_type [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
+   [ run test_autodiff_8.cpp /boost/test//boost_unit_test_framework : : : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release <use>float128_type [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ check-target-builds ../config//is_ci_standalone_run "Standalone CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
+   [ compile compile_test/diff_autodiff_incl_test.cpp : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release <use>float128_type [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
+   [ compile compile_test/diff_finite_difference_incl_test.cpp : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release <use>float128_type [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
+   [ compile compile_test/diff_lanczos_smoothing_incl_test.cpp : <toolset>gcc-mingw:<cxxflags>-Wa,-mbig-obj <debug-symbols>off <toolset>msvc:<cxxflags>/bigobj release [ requires cxx17_if_constexpr cxx17_std_apply ] <use>float128_type [ check-target-builds ../config//is_cygwin_run "Cygwin CI run" : <build>no ] [ requires cxx11_inline_namespaces ] ]
 ;
 
 #
@@ -1513,18 +1523,18 @@ test-suite autodiff :
 #  too much time:
 #
 test-suite long-running-tests :
-   [ run test_0F1.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=3 release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] : test_0F1_3 ]
-   [ run test_0F1.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=4 release : test_0F1_4 ]
-   [ run test_1F1.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=5 <toolset>clang:<cxxflags>-Wno-literal-range [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_1F1_real_concept ]
-   [ run test_1F1.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=6 release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_quad ]
-   [ run test_1F1.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=7 release <toolset>clang:<cxxflags>-Wno-literal-range [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_1F1_dec_40 ]
-   [ run test_1F1_regularized.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=6 release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_regularized_quad ]
-   [ run test_1F1_regularized.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=7 release <toolset>clang:<cxxflags>-Wno-literal-range [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_1F1_regularized_dec_40 ]
-   [ run test_1F1_log.cpp ../../test/build//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=6 release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] <toolset>clang:<cxxflags>-Wno-literal-range [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_1F1_log_quad ]
-   [ run test_1F1_log.cpp ../../test/build//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=7 release <toolset>clang:<cxxflags>-Wno-literal-range [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_1F1_log_dec_40 ]
-   [ run test_pFq.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=6 release [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <define>BOOST_MATH_TEST_FLOAT128 <linkflags>"-Bstatic -lquadmath -Bdynamic" ] <toolset>clang:<cxxflags>-Wno-literal-range [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_pFq_quad ]
-   [ run test_pFq.cpp ../../test/build//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=7 release <toolset>clang:<cxxflags>-Wno-literal-range [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_pFq_dec_40 ]
-   [ run test_pFq_precision.cpp ../tools//mpfr ../tools//gmp ../../test/build//boost_unit_test_framework /boost/system//boost_system /boost/chrono//boost_chrono : : : [ check-target-builds ../config//has_mpfr : : <build>no ] [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] release <toolset>clang:<cxxflags>-Wno-literal-range ]
+   [ run test_0F1.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=3 release <use>float128_type : test_0F1_3 ]
+   [ run test_0F1.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=4 release : test_0F1_4 ]
+   [ run test_1F1.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=5 <toolset>clang:<cxxflags>-Wno-literal-range [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_1F1_real_concept ]
+   [ run test_1F1.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=6 release <use>float128_type [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_quad ]
+   [ run test_1F1.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=7 release <toolset>clang:<cxxflags>-Wno-literal-range [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_1F1_dec_40 ]
+   [ run test_1F1_regularized.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=6 release <use>float128_type [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] <toolset>clang:<cxxflags>-Wno-literal-range : test_1F1_regularized_quad ]
+   [ run test_1F1_regularized.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=7 release <toolset>clang:<cxxflags>-Wno-literal-range [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_1F1_regularized_dec_40 ]
+   [ run test_1F1_log.cpp /boost/test//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=6 release <use>float128_type <toolset>clang:<cxxflags>-Wno-literal-range [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_1F1_log_quad ]
+   [ run test_1F1_log.cpp /boost/test//boost_unit_test_framework : : : release [ requires cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=7 release <toolset>clang:<cxxflags>-Wno-literal-range [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_1F1_log_dec_40 ]
+   [ run test_pFq.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=6 release <use>float128_type <toolset>clang:<cxxflags>-Wno-literal-range [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_pFq_quad ]
+   [ run test_pFq.cpp /boost/test//boost_unit_test_framework : : : [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] <define>TEST=7 release <toolset>clang:<cxxflags>-Wno-literal-range [ check-target-builds ../config//is_ci_sanitizer_run "Sanitizer CI run" : <build>no ] : test_pFq_dec_40 ]
+   [ run test_pFq_precision.cpp ../tools//mpfr ../tools//gmp /boost/test//boost_unit_test_framework /boost/system//boost_system /boost/chrono//boost_chrono : : : [ check-target-builds ../config//has_mpfr : : <build>no ] [ requires cxx11_hdr_initializer_list cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_smart_ptr ] release <toolset>clang:<cxxflags>-Wno-literal-range ]
    [ run test_constant_generate.cpp : : : release <define>USE_CPP_FLOAT=1 <exception-handling>off:<build>no  ]
 ;
 
@@ -1542,9 +1552,7 @@ rule get_float128_tests
            : # command line
            : # input files
            : # requirements
-            [ check-target-builds ../config//has_intel_quad "Intel _Quad datatype support" : <cxxflags>-Qoption,cpp,--extended_float_type <define>BOOST_MATH_USE_FLOAT128 ]
-            [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support" : <linkflags>-lquadmath ]
-            [ check-target-builds ../config//has_128bit_floatmax_t "128-bit floatmax_t" : : <build>no ]
+            <use>float128_type
             <define>BOOST_ALL_NO_LIB
            : $(source:B)_floatmax_t ] ;
      }
diff --git a/test/float128/log1p_expm1_test.cpp b/test/float128/log1p_expm1_test.cpp
index 794861440..c46d5b099 100644
--- a/test/float128/log1p_expm1_test.cpp
+++ b/test/float128/log1p_expm1_test.cpp
@@ -14,7 +14,7 @@
 
 #include "table_type.hpp"
 
-#include "libs/math/test/log1p_expm1_test.hpp"
+#include "log1p_expm1_test.hpp"
 
 //
 // DESCRIPTION:
diff --git a/test/float128/powm1_sqrtp1m1_test.cpp b/test/float128/powm1_sqrtp1m1_test.cpp
index 73972bb7a..bfc219bcc 100644
--- a/test/float128/powm1_sqrtp1m1_test.cpp
+++ b/test/float128/powm1_sqrtp1m1_test.cpp
@@ -16,7 +16,7 @@
 
 #include "table_type.hpp"
 
-#include "libs/math/test/powm1_sqrtp1m1_test.hpp"
+#include "powm1_sqrtp1m1_test.hpp"
 
 //
 // DESCRIPTION:
diff --git a/test/float128/table_type.hpp b/test/float128/table_type.hpp
index 6560762db..7e5c07b24 100644
--- a/test/float128/table_type.hpp
+++ b/test/float128/table_type.hpp
@@ -5,7 +5,7 @@
 
 #ifndef BOOST_MP_TABLE_TYPE
 
-#include <libs/math/test/table_type.hpp>
+#include <table_type.hpp>
 
 #define SC_(x) BOOST_FLOATMAX_C(x)
 
diff --git a/test/float128/test_bessel_i.cpp b/test/float128/test_bessel_i.cpp
index 952cc9d6a..7e0374cdf 100644
--- a/test/float128/test_bessel_i.cpp
+++ b/test/float128/test_bessel_i.cpp
@@ -12,7 +12,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/bessel.hpp>
-#include "libs/math/test/test_bessel_i.hpp"
+#include "test_bessel_i.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_bessel_j.cpp b/test/float128/test_bessel_j.cpp
index 7afeeebeb..f3bab11fd 100644
--- a/test/float128/test_bessel_j.cpp
+++ b/test/float128/test_bessel_j.cpp
@@ -12,7 +12,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/bessel.hpp>
-#include "libs/math/test/test_bessel_j.hpp"
+#include "test_bessel_j.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_bessel_k.cpp b/test/float128/test_bessel_k.cpp
index a5ec1e2b4..7f7144649 100644
--- a/test/float128/test_bessel_k.cpp
+++ b/test/float128/test_bessel_k.cpp
@@ -12,7 +12,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/bessel.hpp>
-#include "libs/math/test/test_bessel_k.hpp"
+#include "test_bessel_k.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_bessel_y.cpp b/test/float128/test_bessel_y.cpp
index 55bdf56e7..240d7785a 100644
--- a/test/float128/test_bessel_y.cpp
+++ b/test/float128/test_bessel_y.cpp
@@ -12,7 +12,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/bessel.hpp>
-#include "libs/math/test/test_bessel_y.hpp"
+#include "test_bessel_y.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_beta.cpp b/test/float128/test_beta.cpp
index 6cfddd566..ecdf34796 100644
--- a/test/float128/test_beta.cpp
+++ b/test/float128/test_beta.cpp
@@ -12,7 +12,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/beta.hpp>
-#include "libs/math/test/test_beta.hpp"
+#include "test_beta.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_binomial_coeff.cpp b/test/float128/test_binomial_coeff.cpp
index be208f4f5..392150b06 100644
--- a/test/float128/test_binomial_coeff.cpp
+++ b/test/float128/test_binomial_coeff.cpp
@@ -12,7 +12,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/binomial.hpp>
-#include "libs/math/test/test_binomial_coeff.hpp"
+#include "test_binomial_coeff.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_carlson.cpp b/test/float128/test_carlson.cpp
index 145849373..0954816c3 100644
--- a/test/float128/test_carlson.cpp
+++ b/test/float128/test_carlson.cpp
@@ -11,7 +11,7 @@
 #include <boost/math/special_functions/ellint_rf.hpp>
 #include <boost/math/special_functions/ellint_rj.hpp>
 #include <boost/math/special_functions/ellint_rg.hpp>
-#include "libs/math/test/test_carlson.hpp"
+#include "test_carlson.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_cbrt.cpp b/test/float128/test_cbrt.cpp
index d6690bdd9..7b53b8a43 100644
--- a/test/float128/test_cbrt.cpp
+++ b/test/float128/test_cbrt.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/cbrt.hpp>
-#include "libs/math/test/test_cbrt.hpp"
+#include "test_cbrt.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_digamma.cpp b/test/float128/test_digamma.cpp
index 9856223be..5702ccf73 100644
--- a/test/float128/test_digamma.cpp
+++ b/test/float128/test_digamma.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/digamma.hpp>
-#include "libs/math/test/test_digamma.hpp"
+#include "test_digamma.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_ellint_1.cpp b/test/float128/test_ellint_1.cpp
index 5c259e940..90f9e1bed 100644
--- a/test/float128/test_ellint_1.cpp
+++ b/test/float128/test_ellint_1.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/ellint_1.hpp>
-#include "libs/math/test/test_ellint_1.hpp"
+#include "test_ellint_1.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_ellint_2.cpp b/test/float128/test_ellint_2.cpp
index 8b0512467..3f43e8c1d 100644
--- a/test/float128/test_ellint_2.cpp
+++ b/test/float128/test_ellint_2.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/ellint_2.hpp>
-#include "libs/math/test/test_ellint_2.hpp"
+#include "test_ellint_2.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_ellint_3.cpp b/test/float128/test_ellint_3.cpp
index e46268388..644dd1cbb 100644
--- a/test/float128/test_ellint_3.cpp
+++ b/test/float128/test_ellint_3.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/ellint_3.hpp>
-#include "libs/math/test/test_ellint_3.hpp"
+#include "test_ellint_3.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_erf.cpp b/test/float128/test_erf.cpp
index 90efd139e..5f3bcaa46 100644
--- a/test/float128/test_erf.cpp
+++ b/test/float128/test_erf.cpp
@@ -8,7 +8,7 @@
 #define TEST_UDT
 
 #include <boost/math/special_functions/erf.hpp>
-#include "libs/math/test/test_erf.hpp"
+#include "test_erf.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_expint.cpp b/test/float128/test_expint.cpp
index 73a1f6bb5..ff9ece822 100644
--- a/test/float128/test_expint.cpp
+++ b/test/float128/test_expint.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/expint.hpp>
-#include "libs/math/test/test_expint.hpp"
+#include "test_expint.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_gamma.cpp b/test/float128/test_gamma.cpp
index ddaae2adf..bcec76083 100644
--- a/test/float128/test_gamma.cpp
+++ b/test/float128/test_gamma.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/gamma.hpp>
-#include "libs/math/test/test_gamma.hpp"
+#include "test_gamma.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_hermite.cpp b/test/float128/test_hermite.cpp
index f933c6d27..3b6fcdfb5 100644
--- a/test/float128/test_hermite.cpp
+++ b/test/float128/test_hermite.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/hermite.hpp>
-#include "libs/math/test/test_hermite.hpp"
+#include "test_hermite.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_ibeta.cpp b/test/float128/test_ibeta.cpp
index 708a6950d..c46da7766 100644
--- a/test/float128/test_ibeta.cpp
+++ b/test/float128/test_ibeta.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/beta.hpp>
-#include "libs/math/test/test_ibeta.hpp"
+#include "test_ibeta.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_ibeta_inv_1.cpp b/test/float128/test_ibeta_inv_1.cpp
index 68049024f..2fc059740 100644
--- a/test/float128/test_ibeta_inv_1.cpp
+++ b/test/float128/test_ibeta_inv_1.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/beta.hpp>
-#include "libs/math/test/test_ibeta_inv.hpp"
+#include "test_ibeta_inv.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_ibeta_inv_ab_4.cpp b/test/float128/test_ibeta_inv_ab_4.cpp
index 3e0bc8581..d02a99f26 100644
--- a/test/float128/test_ibeta_inv_ab_4.cpp
+++ b/test/float128/test_ibeta_inv_ab_4.cpp
@@ -11,7 +11,7 @@
 #define FULL_TEST
 
 #include <boost/math/special_functions/beta.hpp>
-#include "libs/math/test/test_ibeta_inv_ab.hpp"
+#include "test_ibeta_inv_ab.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_igamma.cpp b/test/float128/test_igamma.cpp
index d53325484..7a987c643 100644
--- a/test/float128/test_igamma.cpp
+++ b/test/float128/test_igamma.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/gamma.hpp>
-#include "libs/math/test/test_igamma.hpp"
+#include "test_igamma.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_igamma_inv.cpp b/test/float128/test_igamma_inv.cpp
index 122db9d42..bc9b4289e 100644
--- a/test/float128/test_igamma_inv.cpp
+++ b/test/float128/test_igamma_inv.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/gamma.hpp>
-#include "libs/math/test/test_igamma_inv.hpp"
+#include "test_igamma_inv.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_igamma_inva.cpp b/test/float128/test_igamma_inva.cpp
index 0a244c2f4..19daa7cfa 100644
--- a/test/float128/test_igamma_inva.cpp
+++ b/test/float128/test_igamma_inva.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/gamma.hpp>
-#include "libs/math/test/test_igamma_inva.hpp"
+#include "test_igamma_inva.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_laguerre.cpp b/test/float128/test_laguerre.cpp
index 04ae016b9..dfa475448 100644
--- a/test/float128/test_laguerre.cpp
+++ b/test/float128/test_laguerre.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/laguerre.hpp>
-#include "libs/math/test/test_laguerre.hpp"
+#include "test_laguerre.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_legendre.cpp b/test/float128/test_legendre.cpp
index 463c2d90a..e6de9644a 100644
--- a/test/float128/test_legendre.cpp
+++ b/test/float128/test_legendre.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/legendre.hpp>
-#include "libs/math/test/test_legendre.hpp"
+#include "test_legendre.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_polygamma.cpp b/test/float128/test_polygamma.cpp
index e62cef9af..1ff41e34f 100644
--- a/test/float128/test_polygamma.cpp
+++ b/test/float128/test_polygamma.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/polygamma.hpp>
-#include "libs/math/test/test_polygamma.hpp"
+#include "test_polygamma.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_tgamma_ratio.cpp b/test/float128/test_tgamma_ratio.cpp
index 9d2568f55..0138ce472 100644
--- a/test/float128/test_tgamma_ratio.cpp
+++ b/test/float128/test_tgamma_ratio.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/gamma.hpp>
-#include "libs/math/test/test_tgamma_ratio.hpp"
+#include "test_tgamma_ratio.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_trigamma.cpp b/test/float128/test_trigamma.cpp
index 8862b53d0..3ab2f9473 100644
--- a/test/float128/test_trigamma.cpp
+++ b/test/float128/test_trigamma.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/trigamma.hpp>
-#include "libs/math/test/test_trigamma.hpp"
+#include "test_trigamma.hpp"
 
 void expected_results()
 {
diff --git a/test/float128/test_zeta.cpp b/test/float128/test_zeta.cpp
index 4dcdf19cc..67aebfbff 100644
--- a/test/float128/test_zeta.cpp
+++ b/test/float128/test_zeta.cpp
@@ -7,7 +7,7 @@
 #include "table_type.hpp"
 
 #include <boost/math/special_functions/zeta.hpp>
-#include "libs/math/test/test_zeta.hpp"
+#include "test_zeta.hpp"
 
 void expected_results()
 {
diff --git a/test/test_bernoulli_constants.cpp b/test/test_bernoulli_constants.cpp
index 03ddc8c05..3e3a1469d 100644
--- a/test/test_bernoulli_constants.cpp
+++ b/test/test_bernoulli_constants.cpp
@@ -10,7 +10,7 @@
 #include <boost/test/unit_test.hpp>
 #include <boost/math/concepts/real_concept.hpp>
 #include <boost/math/special_functions/bernoulli.hpp>
-#include <libs/math/test/table_type.hpp>
+#include <table_type.hpp>
 #include <boost/math/tools/test.hpp>
 #include <iostream>
 #include <iomanip>
diff --git a/test/test_nonfinite_io.cpp b/test/test_nonfinite_io.cpp
index b91754981..855843c71 100644
--- a/test/test_nonfinite_io.cpp
+++ b/test/test_nonfinite_io.cpp
@@ -14,8 +14,8 @@
 #define BOOST_TEST_MAIN
 
 #include <boost/test/unit_test.hpp>
-#include <libs/math/test/almost_equal.ipp> // Similar to BOOST_CLOSE_FRACTION.
-#include <libs/math/test/s_.ipp> // To create test strings like std::basic_string<CharType> s = S_("0 -0"); 
+#include <almost_equal.ipp> // Similar to BOOST_CLOSE_FRACTION.
+#include <s_.ipp> // To create test strings like std::basic_string<CharType> s = S_("0 -0"); 
 #include <boost/math/special_functions/nonfinite_num_facets.hpp>
 
 #include <locale>
diff --git a/test/test_owens_t.cpp b/test/test_owens_t.cpp
index 8c33e77f0..11389dd20 100644
--- a/test/test_owens_t.cpp
+++ b/test/test_owens_t.cpp
@@ -38,9 +38,9 @@ using boost::math::owens_t;
 #include <boost/test/tools/floating_point_comparison.hpp>
 #include <boost/array.hpp>
 
-#include "libs/math/test/handle_test_result.hpp"
-#include "libs/math/test/table_type.hpp"
-#include "libs/math/test/functor.hpp"
+#include "handle_test_result.hpp"
+#include "table_type.hpp"
+#include "functor.hpp"
 #include "boost/math/tools/test_value.hpp"
 #include "test_owens_t.hpp"
 
diff --git a/tools/Jamfile.v2 b/tools/Jamfile.v2
index 4a986620b..40678700d 100644
--- a/tools/Jamfile.v2
+++ b/tools/Jamfile.v2
@@ -9,7 +9,7 @@
 # bring in the rules for testing
 import modules ;
 import path ;
-import ../../config/checks/config : requires ;
+import config : requires ;
 
 project  
     : requirements 
@@ -28,26 +28,27 @@ project
       <toolset>msvc:<cxxflags>/wd4701 # needed for lexical cast - temporary.
       <link>static
       <toolset>borland:<runtime-link>static
-      <include>../../..
       <define>BOOST_ALL_NO_LIB=1
       <define>BOOST_UBLAS_UNSUPPORTED_COMPILER=0
       <include>.
       <include>../include_private
+      <library>/boost/multiprecision//boost_multiprecision
+      <library>/boost/algorithm//boost_algorithm
     ;
 
-lib gmp ;
-lib mpfr ;
-lib mpfi ;
-lib quadmath ;
+searched-lib gmp : : <link>shared ;
+searched-lib mpfr : : <link>shared ;
+searched-lib mpfi : : <link>shared ;
+searched-lib quadmath : : <link>shared ;
 
 exe bessel_data : bessel_data.cpp :
 [ check-target-builds ../config//is_ci_standalone_run : <build>no ] ;
 install bessel_data_install : bessel_data : <location>bin ;
 
-exe ellint_f_data : ellint_f_data.cpp ;
+exe ellint_f_data : ellint_f_data.cpp /boost/test//boost_test ;
 install ellint_f_data_install : ellint_f_data : <location>bin ;
 
-exe heuman_lambda_data : heuman_lambda_data.cpp ;
+exe heuman_lambda_data : heuman_lambda_data.cpp /boost/test//boost_test ;
 install heuman_lambda_data_install : heuman_lambda_data : <location>bin ;
 
 exe hyp_2f2_data : hyp_2f2_data.cpp ;
@@ -56,13 +57,13 @@ install hyp_2f2_data_install : hyp_2f2_data : <location>bin ;
 exe laguerre_data : laguerre_data.cpp ;
 install laguerre_data_install : laguerre_data : <location>bin ;
 
-exe bessel_derivative_data : bessel_derivative_data.cpp :
-[ check-target-builds ../../multiprecision/config//has_gmp : <source>gmp : <build>no ] 
-[ check-target-builds ../../multiprecision/config//has_mpfr : <source>mpfr : <build>no ] 
+exe bessel_derivative_data : bessel_derivative_data.cpp /boost/test//boost_test :
+[ check-target-builds /boost/multiprecision/config//has_gmp : <source>gmp : <build>no ] 
+[ check-target-builds /boost/multiprecision/config//has_mpfr : <source>mpfr : <build>no ] 
 [ check-target-builds ../config//is_ci_standalone_run : <build>no ] ;
 install bessel_derivative_data_install : bessel_derivative_data : <location>bin ;
 
-exe ellint_k_data : ellint_k_data.cpp ;
+exe ellint_k_data : ellint_k_data.cpp /boost/test//boost_test ;
 install ellint_k_data_install : ellint_k_data : <location>bin ;
 
 exe hyp_0f2_data : hyp_0f2_data.cpp ;
@@ -81,13 +82,13 @@ exe beta_data : beta_data.cpp :
 [ check-target-builds ../config//is_ci_standalone_run : <build>no ] ;
 install beta_data_install : beta_data : <location>bin ;
 
-exe ellint_pi2_data : ellint_pi2_data.cpp ;
+exe ellint_pi2_data : ellint_pi2_data.cpp /boost/test//boost_test ;
 install ellint_pi2_data_install : ellint_pi2_data : <location>bin ;
 
 exe hyp_1f1_big_data : hyp_1f1_big_data.cpp : 
-[ check-target-builds ../../multiprecision/config//has_gmp : <source>gmp : <build>no ] 
-[ check-target-builds ../../multiprecision/config//has_mpfr : <source>mpfr : <build>no ] 
-[ check-target-builds ../../multiprecision/config//has_mpfi : <source>gmp <source>mpfr <source>mpfi : <build>no ] 
+[ check-target-builds /boost/multiprecision/config//has_gmp : <source>gmp : <build>no ] 
+[ check-target-builds /boost/multiprecision/config//has_mpfr : <source>mpfr : <build>no ] 
+[ check-target-builds /boost/multiprecision/config//has_mpfi : <source>gmp <source>mpfr <source>mpfi : <build>no ] 
 [ requires cxx11_decltype ] ;
 install hyp_1f1_big_data_install : hyp_1f1_big_data : <location>bin ;
 
@@ -98,68 +99,68 @@ install ibeta_data_install : ibeta_data : <location>bin ;
 exe log1p_expm1_data : log1p_expm1_data.cpp ;
 install log1p_expm1_data_install : log1p_expm1_data : <location>bin ;
 
-exe carlson_ellint_data : carlson_ellint_data.cpp ;
+exe carlson_ellint_data : carlson_ellint_data.cpp /boost/test//boost_test ;
 install carlson_ellint_data_install : carlson_ellint_data : <location>bin ;
 
-exe ellint_pi3_data : ellint_pi3_data.cpp ;
+exe ellint_pi3_data : ellint_pi3_data.cpp /boost/test//boost_test ;
 install ellint_pi3_data_install : ellint_pi3_data : <location>bin ;
 
 exe hyp_1f1_data : hyp_1f1_data.cpp : 
-[ check-target-builds ../../multiprecision/config//has_gmp : <source>gmp : <build>no ] 
-[ check-target-builds ../../multiprecision/config//has_mpfr : <source>mpfr : <build>no ] 
-[ check-target-builds ../../multiprecision/config//has_mpfi : <source>gmp <source>mpfr <source>mpfi : <build>no ] 
+[ check-target-builds /boost/multiprecision/config//has_gmp : <source>gmp : <build>no ] 
+[ check-target-builds /boost/multiprecision/config//has_mpfr : <source>mpfr : <build>no ] 
+[ check-target-builds /boost/multiprecision/config//has_mpfi : <source>gmp <source>mpfr <source>mpfi : <build>no ] 
 [ requires cxx11_decltype ] ;
 install hyp_1f1_data_install : hyp_1f1_data : <location>bin ;
 
-exe ibeta_derivative_data : ibeta_derivative_data.cpp :
+exe ibeta_derivative_data : ibeta_derivative_data.cpp /boost/math//testing :
 [ check-target-builds ../config//is_ci_standalone_run : <build>no ] ;
 install ibeta_derivative_data_install : ibeta_derivative_data : <location>bin ;
 
-exe sinc_data : sinc_data.cpp ;
+exe sinc_data : sinc_data.cpp /boost/test//boost_test ;
 install sinc_data_install : sinc_data : <location>bin ;
 
 exe cbrt_data : cbrt_data.cpp ;
 install cbrt_data_install : cbrt_data : <location>bin ;
 
-exe erf_data : erf_data.cpp : [ check-target-builds ../../multiprecision/config//has_float128 : <source>quadmath : <build>no ] ;
+exe erf_data : erf_data.cpp : [ check-target-builds /boost/multiprecision/config//has_float128 : <source>quadmath : <build>no ] ;
 install erf_data_install : erf_data : <location>bin ;
 
 exe hyp_1f1_log_big_data : hyp_1f1_log_big_data.cpp : 
-[ check-target-builds ../../multiprecision/config//has_gmp : <source>gmp : <build>no ] 
-[ check-target-builds ../../multiprecision/config//has_mpfr : <source>mpfr : <build>no ] 
-[ check-target-builds ../../multiprecision/config//has_mpfi : <source>gmp <source>mpfr <source>mpfi : <build>no ] 
+[ check-target-builds /boost/multiprecision/config//has_gmp : <source>gmp : <build>no ] 
+[ check-target-builds /boost/multiprecision/config//has_mpfr : <source>mpfr : <build>no ] 
+[ check-target-builds /boost/multiprecision/config//has_mpfi : <source>gmp <source>mpfr <source>mpfi : <build>no ] 
 [ requires cxx11_decltype ] ;
 install hyp_1f1_log_big_data_install : hyp_1f1_log_big_data : <location>bin ;
 
-exe ibeta_inv_data : ibeta_inv_data.cpp : [ check-target-builds ../../multiprecision/config//has_float128 : <source>quadmath : <build>no ] ;
+exe ibeta_inv_data : ibeta_inv_data.cpp : [ check-target-builds /boost/multiprecision/config//has_float128 : <source>quadmath : <build>no ] ;
 install ibeta_inv_data_install : ibeta_inv_data : <location>bin ;
 
 exe spherical_harmonic_data : spherical_harmonic_data.cpp :
 [ check-target-builds ../config//is_ci_standalone_run : <build>no ] ;
 install spherical_harmonic_data_install : spherical_harmonic_data : <location>bin ;
 
-exe digamma_data : digamma_data.cpp : [ check-target-builds ../../multiprecision/config//has_float128 : <source>quadmath : <build>no ] ;
+exe digamma_data : digamma_data.cpp /boost/test//boost_test : [ check-target-builds /boost/multiprecision/config//has_float128 : <source>quadmath : <build>no ] ;
 install digamma_data_install : digamma_data : <location>bin ;
 
 exe expint_data : expint_data.cpp ;
 install expint_data_install : expint_data : <location>bin ;
 
 exe hyp_1f1_reg_big_data : hyp_1f1_reg_big_data.cpp : 
-[ check-target-builds ../../multiprecision/config//has_gmp : <source>gmp : <build>no ] 
-[ check-target-builds ../../multiprecision/config//has_mpfr : <source>mpfr : <build>no ] 
-[ check-target-builds ../../multiprecision/config//has_mpfi : <source>gmp <source>mpfr <source>mpfi : <build>no ] 
+[ check-target-builds /boost/multiprecision/config//has_gmp : <source>gmp : <build>no ] 
+[ check-target-builds /boost/multiprecision/config//has_mpfr : <source>mpfr : <build>no ] 
+[ check-target-builds /boost/multiprecision/config//has_mpfi : <source>gmp <source>mpfr <source>mpfi : <build>no ] 
 [ requires cxx11_decltype ] ;
 install hyp_1f1_reg_big_data_install : hyp_1f1_reg_big_data : <location>bin ;
 
-exe ibeta_invab_data : ibeta_invab_data.cpp : [ check-target-builds ../../multiprecision/config//has_float128 : <source>quadmath : <build>no ] ;
+exe ibeta_invab_data : ibeta_invab_data.cpp : [ check-target-builds /boost/multiprecision/config//has_float128 : <source>quadmath : <build>no ] ;
 install ibeta_invab_data_install : ibeta_invab_data : <location>bin ;
 
-exe tgamma_large_data : tgamma_large_data.cpp : 
-[ check-target-builds ../../multiprecision/config//has_gmp : <source>gmp : <build>no ] 
-[ check-target-builds ../../multiprecision/config//has_mpfr : <source>mpfr : <build>no ] ;
+exe tgamma_large_data : tgamma_large_data.cpp /boost/test//boost_test : 
+[ check-target-builds /boost/multiprecision/config//has_gmp : <source>gmp : <build>no ] 
+[ check-target-builds /boost/multiprecision/config//has_mpfr : <source>mpfr : <build>no ] ;
 install tgamma_large_data_install : tgamma_large_data : <location>bin ;
 
-exe ellint_d_data : ellint_d_data.cpp ;
+exe ellint_d_data : ellint_d_data.cpp /boost/test//boost_test ;
 install ellint_d_data_install : ellint_d_data : <location>bin ;
 
 exe expint_i_data : expint_i_data.cpp ;
@@ -168,17 +169,17 @@ install expint_i_data_install : expint_i_data : <location>bin ;
 exe hyp_1f2_data : hyp_1f2_data.cpp ;
 install hyp_1f2_data_install : hyp_1f2_data : <location>bin ;
 
-exe igamma_data : igamma_data.cpp : [ check-target-builds ../../multiprecision/config//has_float128 : <source>quadmath : <build>no ] ;
+exe igamma_data : igamma_data.cpp : [ check-target-builds /boost/multiprecision/config//has_float128 : <source>quadmath : <build>no ] ;
 install igamma_data_install : igamma_data : <location>bin ;
 
 exe tgamma_ratio_data : tgamma_ratio_data.cpp : 
 [ check-target-builds ../config//is_ci_standalone_run : <build>no ] ;
 install tgamma_ratio_data_install : tgamma_ratio_data : <location>bin ;
 
-exe ellint_d2_data : ellint_d2_data.cpp ;
+exe ellint_d2_data : ellint_d2_data.cpp /boost/test//boost_test ;
 install ellint_d2_data_install : ellint_d2_data : <location>bin ;
 
-exe gamma_P_inva_data : gamma_P_inva_data.cpp : [ check-target-builds ../../multiprecision/config//has_float128 : <source>quadmath : <build>no ] ;
+exe gamma_P_inva_data : gamma_P_inva_data.cpp : [ check-target-builds /boost/multiprecision/config//has_float128 : <source>quadmath : <build>no ] ;
 install gamma_P_inva_data_install : gamma_P_inva_data : <location>bin ;
 
 exe hyp_2f0_data : hyp_2f0_data.cpp ;
@@ -190,7 +191,7 @@ install inv_hyp_data_install : inv_hyp_data : <location>bin ;
 exe trig_data : trig_data.cpp ;
 install trig_data_install : trig_data : <location>bin ;
 
-exe ellint_e_data : ellint_e_data.cpp ;
+exe ellint_e_data : ellint_e_data.cpp /boost/test//boost_test ;
 install ellint_e_data_install : ellint_e_data : <location>bin ;
 
 exe hermite_data : hermite_data.cpp ;
@@ -199,10 +200,10 @@ install hermite_data_install : hermite_data : <location>bin ;
 exe hyp_2f1_data : hyp_2f1_data.cpp ;
 install hyp_2f1_data_install : hyp_2f1_data : <location>bin ;
 
-exe jacobi_theta_data : jacobi_theta_data.cpp ;
+exe jacobi_theta_data : jacobi_theta_data.cpp /boost/test//boost_test ;
 install jacobi_theta_data_install : jacobi_theta_data : <location>bin ;
 
-exe jacobi_zeta_data : jacobi_zeta_data.cpp ;
+exe jacobi_zeta_data : jacobi_zeta_data.cpp /boost/test//boost_test ;
 install jacobi_zeta_data_install : jacobi_zeta_data : <location>bin ;
 
 exe zeta_data : zeta_data.cpp :
@@ -215,8 +216,8 @@ install generate_test_values_install : generate_test_values : <location>bin ;
 exe igamma_temme_large_coef : igamma_temme_large_coef.cpp ;
 install igamma_temme_large_coef_install : igamma_temme_large_coef : <location>bin ;
 
-exe lanczos_generator : lanczos_generator.cpp ../../chrono/build//boost_chrono ../../system/build//boost_system : 
-[ check-target-builds ../../multiprecision/config//has_float128 : <source>quadmath : <build>no ] 
+exe lanczos_generator : lanczos_generator.cpp /boost/chrono//boost_chrono /boost/system//boost_system : 
+[ check-target-builds /boost/multiprecision/config//has_float128 : <source>quadmath : <build>no ] 
 [ requires cxx11_nullptr ] ;
 install lanczos_generator_install : lanczos_generator : <location>bin ;
 
@@ -228,11 +229,11 @@ install generate_rational_test_install : generate_rational_test : <location>bin
 
 #for local source in [ glob *_data.cpp ] generate_test_values.cpp igamma_temme_large_coef.cpp lanczos_generator.cpp factorial_tables.cpp generate_rational_test.cpp
 #{
-#   exe $(source:B) : $(source) : [ check-target-builds ../../multiprecision/config//has_gmp : <define>HAS_GMP <source>gmp : <build>no ] [ check-target-builds ../../multiprecision/config//has_mpfr : <define>HAS_MPFR <source>mpfr : <build>no ] [ check-target-builds ../../multiprecision/config//has_mpfi : <define>HAS_MPFI <source>gmp <source>mpfr <source>mpfi ] ;
+#   exe $(source:B) : $(source) : [ check-target-builds /boost/multiprecision/config//has_gmp : <define>HAS_GMP <source>gmp : <build>no ] [ check-target-builds /boost/multiprecision/config//has_mpfr : <define>HAS_MPFR <source>mpfr : <build>no ] [ check-target-builds /boost/multiprecision/config//has_mpfi : <define>HAS_MPFI <source>gmp <source>mpfr <source>mpfi ] ;
 #   install $(source:B)_bin : $(source:B) : <location>bin ;
 #}
 
 exe generate_rational_code : generate_rational_code.cpp ;
-exe process_perf_results : process_perf_results.cpp ;
+exe process_perf_results : process_perf_results.cpp /boost/format//boost_format ;
 
 install bin : generate_rational_code process_perf_results ;
diff --git a/tools/ibeta_derivative_data.cpp b/tools/ibeta_derivative_data.cpp
index f00fe4678..27d647410 100644
--- a/tools/ibeta_derivative_data.cpp
+++ b/tools/ibeta_derivative_data.cpp
@@ -17,11 +17,11 @@ using namespace boost::math::tools;
 using namespace boost::math;
 using namespace std;
 
-#include <libs/math/test/table_type.hpp>
+#include <table_type.hpp>
 
 #define T double
 #define SC_(x) static_cast<double>(x)
-#include <libs/math/test/ibeta_int_data.ipp>
+#include <ibeta_int_data.ipp>
 
 int main(int, char* [])
 {
diff --git a/tools/nc_t_data.cpp b/tools/nc_t_data.cpp
index 90b9e6155..ff3b99473 100644
--- a/tools/nc_t_data.cpp
+++ b/tools/nc_t_data.cpp
@@ -24,7 +24,7 @@
 #include <boost/multiprecision/mpfr.hpp>
 #include <fstream>
 
-#include <libs/math/test/table_type.hpp>
+#include <table_type.hpp>
 
 using namespace boost::math::tools;
 using namespace boost::math;
@@ -91,7 +91,7 @@ int main(int, char* [])
    boost::math::quadrature::exp_sinh<big_t> integrator(10);
    using T = float;
 
-#include <libs/math/test/nct.ipp>
+#include <nct.ipp>
 
 
    for (unsigned i = 0; i < nct.size(); ++i)
@@ -127,7 +127,7 @@ int main(int, char* [])
       std::cout << cdf << "), SC_(" << ccdf << ") }}," << std::endl;
    }
 
-#include <libs/math/test/nct_small_delta.ipp>
+#include <nct_small_delta.ipp>
    for (unsigned i = 0; i < nct_small_delta.size(); ++i)
    {
       big_t error1, error2;
