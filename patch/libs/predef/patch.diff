diff --git a/build.jam b/build.jam
deleted file mode 100644
index 0f39f9d..0000000
--- a/build.jam
+++ /dev/null
@@ -1,43 +0,0 @@
-# Copyright Ren√© Ferdinand Rivera Morell 2014-2019
-# Distributed under the Boost Software License, Version 1.0.
-# (See accompanying file LICENSE_1_0.txt or copy at
-# http://www.boost.org/LICENSE_1_0.txt)
-
-#|
-This B2 project provides support for using the Predef library externally as
-a standalone project or by embedding in your B2 project tree. To use
-externally you would need a `use-project` declaration and to use the
-project as a dependency where needed:
-
-----
-use-project /hash-predef : /path/to/hash-predef/root ;
-
-exe my_thing : main.cpp : <dependency>/hash-predef ;
-----
-
-To use in your project tree you would only need to place the Predef tree
-in a subdirectory and reference the project location as a dependency where
-needed.
-
-----
-exe my_thin : main.cpp : <dependency>libs/hash-predef ;
-----
-|#
-
-import project ;
-
-path-constant BOOST_PREDEF_ROOT : . ;
-path-constant BOOST_PREDEF_INCLUDE : include ;
-constant PREDEF_DIST : boost ;
-
-project /boost/predef
-    : usage-requirements
-        <include>$(BOOST_PREDEF_INCLUDE) ;
-
-if [ project.is-jamroot-module $(__name__) ]
-{
-    local attributes = [ project.attributes $(__name__) ] ;
-    $(attributes).set "build-dir" : .bin ;
-}
-
-alias libs ;
diff --git a/build.jam b/build.jam
new file mode 120000
index 0000000..fa94b2c
--- /dev/null
+++ b/build.jam
@@ -0,0 +1 @@
+/home/grafik/Sync/DevRoots/Boost/modular/patch/libs/predef/build.jam
\ No newline at end of file
diff --git a/test/build.jam b/test/build.jam
index beebe6e..c45a6c6 100644
--- a/test/build.jam
+++ b/test/build.jam
@@ -1,9 +1,9 @@
-# Copyright Rene Rivera 2011-2019
+# Copyright Rene Rivera 2011-2023
 # Distributed under the Boost Software License, Version 1.0.
 # (See accompanying file LICENSE_1_0.txt or copy at
 # http://www.boost.org/LICENSE_1_0.txt)
 
-import ../tools/check/predef : require check : predef-require predef-check ;
+import predef : require check : predef-require predef-check ;
 import common ;
 import path ;
 import regex ;
diff --git a/tools/check/predef.jam b/tools/check/predef.jam
index dd18bfb..a8bd1ec 100644
--- a/tools/check/predef.jam
+++ b/tools/check/predef.jam
@@ -31,6 +31,7 @@ rule check ( expressions + : language ? : true-properties * : false-properties *
     language ?= cpp ;
     
     local project_target = [ project.target $(__name__) ] ;
+    $(project_target).reset-alternatives ;
 	project.push-current $(project_target) ;
     local terms ;
     local result ;
@@ -69,6 +70,30 @@ rule require ( expressions + : language ? )
     return [ check $(expressions) : $(language) : : <build>no ] ;
 }
 
+# Set the address-model to the default/deduced value for the context.
+rule address-model ( )
+{
+    return
+        [ check "BOOST_ARCH_WORD_BITS == 0.0.16" : : <address-model>16 ]
+        [ check "BOOST_ARCH_WORD_BITS == 0.0.32" : : <address-model>32 ]
+        [ check "BOOST_ARCH_WORD_BITS == 0.0.64" : : <address-model>64 ]
+        ;
+}
+
+# Set the architecture to the default/deduced value to the context.
+rule architecture ( )
+{
+    local result = ;
+    local deducable-arch =
+        x86 ia64 sparc ppc loongarch mips parisc arm riscv ;
+    for arch in $(deducable-arch)
+    {
+        result += [ check BOOST_ARCH_$(arch:U) : : <architecture>$(arch) ] ;
+    }
+    result += [ check BOOST_ARCH_SYS390 : : <architecture>s390x ] ;
+    return $(result) ;
+}
+
 #############################################################################
 
 .c.ext = c ;
@@ -112,6 +137,7 @@ local rule change_term_to_def ( term )
 class check-expression-evaluator
 {
     import configure ;
+    import property ;
     
     rule __init__ ( expression + : true-properties * : false-properties * )
     {
@@ -155,14 +181,22 @@ class check-expression-evaluator
         # Eval full the expression.
         local eval-result = [ eval $(to-eval) ] ;
         # And resolve true/false properties.
+        local result = ;
         if $(eval-result) = "true"
         {
-            return $(self.true-properties) ;
+            result = $(self.true-properties) ;
         }
         else
         {
-            return $(self.false-properties) ;
+            result = $(self.false-properties) ;
+        }
+        if $(result)
+        {
+            # Don't override anything that is explicitly specified.
+            local base = [ property.select $(result:G) : $(properties) ] ;
+            result = [ property.refine $(result) : $(base) ] ;
         }
+        return $(result) ;
     }
     
     rule eval ( e * )
